// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240603154404_add_usedCount_medicine")]
    partial class add_usedCount_medicine
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageMedicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "61826 Bergstrom Parkway, West Milesfurt, Kuwait",
                            Class = "9A",
                            Date = new DateTime(2016, 2, 27, 14, 31, 17, 492, DateTimeKind.Unspecified).AddTicks(8183),
                            Gender = true,
                            StudentCode = "HS2022584",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "487 Kenny Wall, Predovicview, Qatar",
                            Class = "9A",
                            Date = new DateTime(2012, 7, 29, 1, 56, 32, 706, DateTimeKind.Unspecified).AddTicks(9497),
                            Gender = false,
                            StudentCode = "HS2023224",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "71455 O'Hara Springs, Lake Boville, Macedonia",
                            Class = "9A",
                            Date = new DateTime(2009, 3, 10, 20, 54, 4, 236, DateTimeKind.Unspecified).AddTicks(3562),
                            Gender = true,
                            StudentCode = "HS2023218",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "9932 Liliane Villages, North Loriview, Costa Rica",
                            Class = "9A",
                            Date = new DateTime(2014, 7, 5, 0, 35, 27, 160, DateTimeKind.Unspecified).AddTicks(2950),
                            Gender = false,
                            StudentCode = "HS2022444",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "531 Bechtelar Center, West Madisyn, Uganda",
                            Class = "9A",
                            Date = new DateTime(2010, 11, 28, 9, 46, 31, 571, DateTimeKind.Unspecified).AddTicks(1508),
                            Gender = false,
                            StudentCode = "HS2021443",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "802 McCullough Gateway, Lake Tina, Honduras",
                            Class = "9A",
                            Date = new DateTime(2009, 11, 23, 4, 28, 54, 991, DateTimeKind.Unspecified).AddTicks(1964),
                            Gender = true,
                            StudentCode = "HS2023431",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "598 Rudolph Run, Lake Colleenview, Tajikistan",
                            Class = "9A",
                            Date = new DateTime(2014, 6, 25, 7, 26, 32, 535, DateTimeKind.Unspecified).AddTicks(8176),
                            Gender = false,
                            StudentCode = "HS2021959",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "8790 Irving River, South Mikel, Iceland",
                            Class = "9A",
                            Date = new DateTime(2009, 11, 22, 14, 10, 38, 117, DateTimeKind.Unspecified).AddTicks(8286),
                            Gender = false,
                            StudentCode = "HS2020415",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "81423 Destini Burg, Gorczanymouth, Saudi Arabia",
                            Class = "9A",
                            Date = new DateTime(2009, 9, 28, 12, 58, 40, 419, DateTimeKind.Unspecified).AddTicks(6024),
                            Gender = false,
                            StudentCode = "HS2023614",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "87804 Jessica Square, Lake Samara, Azerbaijan",
                            Class = "9A",
                            Date = new DateTime(2013, 1, 27, 1, 25, 8, 747, DateTimeKind.Unspecified).AddTicks(7610),
                            Gender = true,
                            StudentCode = "HS2021436",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3eb1855b-0b8f-483a-a39c-439fb381c1d7",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnbCzO3GcBkHKhrpGDs8YUHFTFaYON866RIcShYktLNZXDDt6Msgsj93Eq3XoHN9w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "292ce9be-fb38-4564-8fe2-15115099dab0",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4992094-4934-44bf-a14c-7ef8c1643a1b",
                            Email = "Isaiah_Keeling81@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Shanelle Feest",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISAIAH_KEELING81@HOTMAIL.COM",
                            NormalizedUserName = "HS2022584",
                            PasswordHash = "AQAAAAIAAYagAAAAELILjG6ZzXGsn5Wz+AgJ+d4XeLBhlMxbVBUPgEWMBmhC2rNM5PmvQten8YSLq2XVpw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "2db7c01a-ab59-4e19-a8ef-2a2ffcbb3577",
                            TwoFactorEnabled = false,
                            UserName = "HS2022584"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0045b136-0931-4891-bcb0-04a57ec9e844",
                            Email = "Greg36@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Madelyn Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "GREG36@HOTMAIL.COM",
                            NormalizedUserName = "HS2023224",
                            PasswordHash = "AQAAAAIAAYagAAAAENN5j6PfqCQULvo8SZRKk8aQm1D0zsygR3ly57tJsJLApMTzUF0wszBLZR1lcTwmGQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "18bf591b-cfe7-4fb5-a71d-973a847c1eee",
                            TwoFactorEnabled = false,
                            UserName = "HS2023224"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "654e642d-0549-4f68-b951-6b6f37fd40c3",
                            Email = "Cristian18@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Otho Wiza",
                            LockoutEnabled = false,
                            NormalizedEmail = "CRISTIAN18@GMAIL.COM",
                            NormalizedUserName = "HS2023218",
                            PasswordHash = "AQAAAAIAAYagAAAAEJT1V+Hn6z3BZfNTjvmxsVl6C8skzA4UByZZ0viIib2qZ5k78W/k+PuaCdJdyzO1YA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "7d2fec3c-91f5-42ab-b91c-047baea95964",
                            TwoFactorEnabled = false,
                            UserName = "HS2023218"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1ce2a53-10d9-4d1f-a711-125d66b900bf",
                            Email = "Candace48@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Forrest Kunze",
                            LockoutEnabled = false,
                            NormalizedEmail = "CANDACE48@GMAIL.COM",
                            NormalizedUserName = "HS2022444",
                            PasswordHash = "AQAAAAIAAYagAAAAEKwLzn1kN5RCWdAx593N2T1M4Ua1eWVaVonVQ/NR7tThW3p6iYUOp3NL6eAUdD/AwA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "7b26e5e2-1c4e-42ef-b91e-0a383fc467e4",
                            TwoFactorEnabled = false,
                            UserName = "HS2022444"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cbd8f0a-1da2-415b-aaa0-507abbfddbd9",
                            Email = "Berry.Kirlin70@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Marcel Ortiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRY.KIRLIN70@YAHOO.COM",
                            NormalizedUserName = "HS2021443",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTHn89Us8I2/WChQkylUEQ8eOzIpOfhFBok6xJjW7HEbnyUsTD3u2xAJtg5d/NXRw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0a6b05b4-80b7-4172-97d3-b3b19ecc5c25",
                            TwoFactorEnabled = false,
                            UserName = "HS2021443"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9b01e2b-8c51-4bc0-9b22-42e1c2e4eea6",
                            Email = "Emile_Fadel51@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Mohammad Farrell",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILE_FADEL51@GMAIL.COM",
                            NormalizedUserName = "HS2023431",
                            PasswordHash = "AQAAAAIAAYagAAAAENMrVrCxBQiqofUqdbPPLXJxuqtFmQy2SzD4JhL6PDRRO5km2bIK0mcj1cltnGV7ww==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "8404b0c5-0343-4320-89c7-3bc1e79a3320",
                            TwoFactorEnabled = false,
                            UserName = "HS2023431"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b54252e-a9b4-43e4-8cfe-2b035c6b0862",
                            Email = "Agnes.Wunsch@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Maryse Hessel",
                            LockoutEnabled = false,
                            NormalizedEmail = "AGNES.WUNSCH@YAHOO.COM",
                            NormalizedUserName = "HS2021959",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJw25BeHBivshhg7zXu7Ac8vP7PfpVAdJkvCSkeWOWb6e1M+2ldWitfQagPHmO95w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "9dfe423b-7a19-40f6-98cd-a7171f619210",
                            TwoFactorEnabled = false,
                            UserName = "HS2021959"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "451b951f-e643-4908-a646-9c702329e488",
                            Email = "Savannah.Lockman@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Harley Bosco",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAVANNAH.LOCKMAN@GMAIL.COM",
                            NormalizedUserName = "HS2020415",
                            PasswordHash = "AQAAAAIAAYagAAAAEFkzdvXorXrUxup8OcDwDTuWcWrtikWsipzU69tJoyE3BY2F+YvFkEla8MRwPyu9RQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "200664e4-da5f-486a-8cb9-19af80d91915",
                            TwoFactorEnabled = false,
                            UserName = "HS2020415"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7d6f49d-5819-4ce5-abdf-67c1c2abaef9",
                            Email = "Hazle.Greenfelder68@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Brandi Botsford",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAZLE.GREENFELDER68@YAHOO.COM",
                            NormalizedUserName = "HS2023614",
                            PasswordHash = "AQAAAAIAAYagAAAAENLcPFRZzNk5aySPK9ykTQuwMDis2JJcluQ2x74bMB/3Pa6b2CyRJx3PZi+UIeon7g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "4df974a2-9bf0-4e09-aa29-13d63d61c23d",
                            TwoFactorEnabled = false,
                            UserName = "HS2023614"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc2774cc-5070-4369-81a8-0c16a02f75a7",
                            Email = "Erick90@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Caden Pagac",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERICK90@HOTMAIL.COM",
                            NormalizedUserName = "HS2021436",
                            PasswordHash = "AQAAAAIAAYagAAAAEG80jKYd8beUO4q2YS4lLX7JqFRI+0WvBTHL5a3TOUClfWjBBnAKK58hMXBogLPimA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "08dc9afd-523a-45a4-84ab-adce22dcf995",
                            TwoFactorEnabled = false,
                            UserName = "HS2021436"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
