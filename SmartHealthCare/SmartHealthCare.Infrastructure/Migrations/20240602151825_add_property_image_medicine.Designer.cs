// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240602151825_add_property_image_medicine")]
    partial class add_property_image_medicine
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageMedicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "94437 Schmitt Island, Teaganport, Saint Barthelemy",
                            Class = "9A",
                            Date = new DateTime(2011, 11, 17, 17, 4, 24, 388, DateTimeKind.Unspecified).AddTicks(6118),
                            Gender = false,
                            StudentCode = "HS2021925",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "083 Farrell Hollow, Harveyland, Christmas Island",
                            Class = "9A",
                            Date = new DateTime(2011, 12, 28, 14, 28, 37, 301, DateTimeKind.Unspecified).AddTicks(5814),
                            Gender = true,
                            StudentCode = "HS2021312",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "96331 Verdie Center, Bechtelarberg, Finland",
                            Class = "9A",
                            Date = new DateTime(2008, 3, 11, 20, 26, 10, 90, DateTimeKind.Unspecified).AddTicks(5555),
                            Gender = true,
                            StudentCode = "HS2020102",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "5345 Hilll Stream, Larrymouth, Guam",
                            Class = "9A",
                            Date = new DateTime(2014, 11, 18, 12, 38, 48, 281, DateTimeKind.Unspecified).AddTicks(3419),
                            Gender = false,
                            StudentCode = "HS2021365",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "09156 Spencer Fords, New Allenmouth, Libyan Arab Jamahiriya",
                            Class = "9A",
                            Date = new DateTime(2017, 12, 29, 10, 48, 13, 814, DateTimeKind.Unspecified).AddTicks(5617),
                            Gender = true,
                            StudentCode = "HS2021081",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "28508 Paucek Walk, South Connorfort, Puerto Rico",
                            Class = "9A",
                            Date = new DateTime(2010, 5, 11, 17, 55, 57, 197, DateTimeKind.Unspecified).AddTicks(3251),
                            Gender = false,
                            StudentCode = "HS2022166",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "61821 Amari Parks, Morganstad, Jordan",
                            Class = "9A",
                            Date = new DateTime(2015, 7, 5, 1, 28, 37, 537, DateTimeKind.Unspecified).AddTicks(4667),
                            Gender = false,
                            StudentCode = "HS2022192",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "263 Streich Manors, East Earleneville, Mozambique",
                            Class = "9A",
                            Date = new DateTime(2008, 8, 6, 15, 4, 57, 34, DateTimeKind.Unspecified).AddTicks(5082),
                            Gender = false,
                            StudentCode = "HS2020269",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "115 Leffler Lock, Jastchester, Liberia",
                            Class = "9A",
                            Date = new DateTime(2012, 7, 13, 13, 26, 49, 167, DateTimeKind.Unspecified).AddTicks(5492),
                            Gender = false,
                            StudentCode = "HS2023140",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "21786 Muhammad Street, North Marcel, Fiji",
                            Class = "9A",
                            Date = new DateTime(2015, 11, 20, 4, 16, 27, 383, DateTimeKind.Unspecified).AddTicks(9232),
                            Gender = false,
                            StudentCode = "HS2022165",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa199d9d-8a20-4a62-8b30-fa8e85b9cc37",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECK4h0ACqRI7MzKhAII1ZG505SwUvW/B2HU9kPdg06yPw0vs8HsAPqS7bS8ewwn+nA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "02754361-beca-4fbc-a85b-6924d17f3c1f",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e880ffb-9298-41dc-98eb-7cc1393270d5",
                            Email = "Maverick62@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Deangelo Fisher",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAVERICK62@GMAIL.COM",
                            NormalizedUserName = "HS2021925",
                            PasswordHash = "AQAAAAIAAYagAAAAEHNZzk4uupEka901yvYQehcPBKREEI0NdvtT8AwjIzHshQe3Re8DGWHsJxX1oNA+HA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "9d95697e-125f-4cd3-bff3-99fd7ba1c9c5",
                            TwoFactorEnabled = false,
                            UserName = "HS2021925"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7dd33481-85ed-426f-907b-95001632520b",
                            Email = "Lance_Barton@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Jude Trantow",
                            LockoutEnabled = false,
                            NormalizedEmail = "LANCE_BARTON@GMAIL.COM",
                            NormalizedUserName = "HS2021312",
                            PasswordHash = "AQAAAAIAAYagAAAAEEgwFaZxIg6uspmSrr0zlqvZw3QWH1vfczmH5JLSZO8G4DX78IuN0Ej/7dFof2wA0A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "a949ca0f-c4cf-4ec9-b324-2390b79415a9",
                            TwoFactorEnabled = false,
                            UserName = "HS2021312"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3eb1d8d7-f23e-48e2-b557-14fed4af6272",
                            Email = "Teresa_Larkin22@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Melany Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "TERESA_LARKIN22@YAHOO.COM",
                            NormalizedUserName = "HS2020102",
                            PasswordHash = "AQAAAAIAAYagAAAAEBweI2nL5yZXc1d+OPP5ywbAxt1me1S7poJgoKtMf3U/odZ9ylgG1PwuOq2um4eF6g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "bcd14695-dd39-46e2-b2de-a3fe39bda277",
                            TwoFactorEnabled = false,
                            UserName = "HS2020102"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "452c2027-6527-414c-9b6c-5a1ba87dabc5",
                            Email = "Davin.Jenkins12@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Gilda Wyman",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVIN.JENKINS12@YAHOO.COM",
                            NormalizedUserName = "HS2021365",
                            PasswordHash = "AQAAAAIAAYagAAAAEBn8XLw4U62nMSivXSS837lva27aZ8o0kBIZL9d6kQiM4Vuo+kgY3I/2jjCPdvAVkw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "7ec51d88-2fce-4f3c-82e6-79bf564001cf",
                            TwoFactorEnabled = false,
                            UserName = "HS2021365"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfe7444f-7f0e-4190-967a-9f132afac9fb",
                            Email = "Erica.Haag@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Mikel Leffler",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERICA.HAAG@HOTMAIL.COM",
                            NormalizedUserName = "HS2021081",
                            PasswordHash = "AQAAAAIAAYagAAAAEFc1VyTh2+BQAtw1pGNbTFEKadjA2jeX+mzevx14oD4yJ45cWYRpEB8wBMc8AMLZYQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "abb4da86-828a-42d7-a027-84ded01257cd",
                            TwoFactorEnabled = false,
                            UserName = "HS2021081"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b267dcec-0d5b-40c7-ae68-7b618c99bb91",
                            Email = "Agnes.DuBuque86@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "May Rice",
                            LockoutEnabled = false,
                            NormalizedEmail = "AGNES.DUBUQUE86@YAHOO.COM",
                            NormalizedUserName = "HS2022166",
                            PasswordHash = "AQAAAAIAAYagAAAAENvo4zUxS6cBgePE52Hs+o7X2/DAewg7jSgDcX4skRBYIBvdkip/aYgIxpH01sc+DQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0175b9df-480b-4aec-9d3b-95e0bf192286",
                            TwoFactorEnabled = false,
                            UserName = "HS2022166"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17825feb-b0c5-4844-91d3-0a8913d080ef",
                            Email = "Maximilian_Maggio89@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Elsie Schamberger",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAXIMILIAN_MAGGIO89@HOTMAIL.COM",
                            NormalizedUserName = "HS2022192",
                            PasswordHash = "AQAAAAIAAYagAAAAEJUl2Tlkeapj+Bi1YijhkDXKRLCPfOVKuUuc8IBB8/GB/Dp3EsfLqBFcWKqvgqyXag==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "6d55f3a1-3696-428c-b4ed-2d31bca3d5b2",
                            TwoFactorEnabled = false,
                            UserName = "HS2022192"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad293b60-d539-43ed-9066-e88040e3cac0",
                            Email = "Freddie75@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Helena Stoltenberg",
                            LockoutEnabled = false,
                            NormalizedEmail = "FREDDIE75@GMAIL.COM",
                            NormalizedUserName = "HS2020269",
                            PasswordHash = "AQAAAAIAAYagAAAAEGUTkKDY15V02JLDdk8VAdZmUKyBD3wBArqySzkGXF70zLsF+c/PhNGITwkxTGai6g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5ac139d8-fbc9-4e84-9865-fd9f733766c6",
                            TwoFactorEnabled = false,
                            UserName = "HS2020269"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29c174c2-6a4a-4bb1-a5f5-7276ac4d6b93",
                            Email = "Marta.Howe8@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Jeramie Shields",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTA.HOWE8@GMAIL.COM",
                            NormalizedUserName = "HS2023140",
                            PasswordHash = "AQAAAAIAAYagAAAAEOwxTaZJqei5S0OQ8aVcbvmoUNIbNEiqlRIiAojTaHp4fOpuTej3djA35fhMtE/gaQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0233a65f-e6d8-438b-8227-0aedf28b1765",
                            TwoFactorEnabled = false,
                            UserName = "HS2023140"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90737ca2-e67f-408b-b87c-d97b17f24814",
                            Email = "Anahi57@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Elisa Green",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANAHI57@GMAIL.COM",
                            NormalizedUserName = "HS2022165",
                            PasswordHash = "AQAAAAIAAYagAAAAEPYOzER455GXdHbHFUHLAZW59hMi9s05pAkyTPrvkfQO5EWrrUitzVMRbUH5KyaHLQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0f466ada-8faf-4804-8ad6-e62469230704",
                            TwoFactorEnabled = false,
                            UserName = "HS2022165"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
