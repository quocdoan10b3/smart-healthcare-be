// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240518173150_AddPropertyAvatarUrl")]
    partial class AddPropertyAvatarUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "97895 Alysson Highway, North Idella, Belarus",
                            Class = "9A",
                            Date = new DateTime(2012, 1, 14, 10, 3, 6, 318, DateTimeKind.Unspecified).AddTicks(7516),
                            Gender = false,
                            StudentCode = "Titus.Turner69@yahoo.com",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "9646 Velma Ferry, Shieldsfurt, Bhutan",
                            Class = "9A",
                            Date = new DateTime(2009, 5, 7, 16, 45, 24, 305, DateTimeKind.Unspecified).AddTicks(6732),
                            Gender = false,
                            StudentCode = "Tremayne15@hotmail.com",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "73794 Flo Well, Marielaside, Benin",
                            Class = "9A",
                            Date = new DateTime(2016, 2, 7, 16, 30, 0, 19, DateTimeKind.Unspecified).AddTicks(196),
                            Gender = false,
                            StudentCode = "Elyse_Feil1@hotmail.com",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "1770 Willard Cliffs, Ricestad, Palau",
                            Class = "9A",
                            Date = new DateTime(2015, 8, 29, 4, 1, 54, 261, DateTimeKind.Unspecified).AddTicks(2529),
                            Gender = true,
                            StudentCode = "Katarina_Sawayn@yahoo.com",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "318 Bernadine Green, Lake Joshua, Holy See (Vatican City State)",
                            Class = "9A",
                            Date = new DateTime(2009, 4, 10, 6, 0, 31, 518, DateTimeKind.Unspecified).AddTicks(1642),
                            Gender = true,
                            StudentCode = "Claire91@hotmail.com",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "8960 Kreiger Mission, Leoramouth, Azerbaijan",
                            Class = "9A",
                            Date = new DateTime(2015, 9, 4, 3, 51, 47, 600, DateTimeKind.Unspecified).AddTicks(80),
                            Gender = true,
                            StudentCode = "Russel_Bechtelar7@hotmail.com",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "3566 Schmitt Motorway, Kautzerport, French Polynesia",
                            Class = "9A",
                            Date = new DateTime(2011, 7, 2, 18, 43, 45, 619, DateTimeKind.Unspecified).AddTicks(9924),
                            Gender = true,
                            StudentCode = "Davon.Stamm@yahoo.com",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "6366 Krystal Key, Skilestown, Congo",
                            Class = "9A",
                            Date = new DateTime(2017, 8, 3, 16, 46, 10, 371, DateTimeKind.Unspecified).AddTicks(1572),
                            Gender = false,
                            StudentCode = "Elenora_Daniel@gmail.com",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "26555 Tromp Parks, Ellaberg, Martinique",
                            Class = "9A",
                            Date = new DateTime(2011, 3, 21, 18, 19, 31, 964, DateTimeKind.Unspecified).AddTicks(2531),
                            Gender = false,
                            StudentCode = "Nelda14@gmail.com",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "3327 Morissette Ridge, Lake Vicky, Turks and Caicos Islands",
                            Class = "9A",
                            Date = new DateTime(2010, 12, 9, 12, 41, 37, 494, DateTimeKind.Unspecified).AddTicks(5284),
                            Gender = true,
                            StudentCode = "Krista.Leffler@gmail.com",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44e1b308-58ca-402e-9415-4f6092de3e2e",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECflVOOkowVxNDPgR2BmTUBRr6vSSdRjmMH81AnZjckc8oa7V74uZklV312iU+EDnA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "f03d8c8d-b65b-4012-ad64-a5ca14aa7358",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7b02217-e67a-4659-b70a-5e9948a14632",
                            Email = "Titus.Turner69@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Burdette Wolff",
                            LockoutEnabled = false,
                            NormalizedEmail = "TITUS.TURNER69@YAHOO.COM",
                            NormalizedUserName = "TITUS.TURNER69@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPkPnuUpGawMljAS8FaxV4iVd21PLm6He+RJLRoygRVPXvqynhtKMxQB18xR7htMOA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "e630537f-7382-4acf-abcd-316035f21c3f",
                            TwoFactorEnabled = false,
                            UserName = "Titus.Turner69@yahoo.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "143a4bd3-53ed-4b75-bed5-02d2f7fa122e",
                            Email = "Tremayne15@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "June Dooley",
                            LockoutEnabled = false,
                            NormalizedEmail = "TREMAYNE15@HOTMAIL.COM",
                            NormalizedUserName = "TREMAYNE15@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFaCs6CFzSI2U1R2RMl7pV0AWCkOJDvZDaaTafiUmL2iXvHenCRh/bIgBjgE23VlpQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "ad7a3f50-1458-4f9a-a74d-2860748aba6f",
                            TwoFactorEnabled = false,
                            UserName = "Tremayne15@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8e7fef1-e23f-4836-9edf-557c992aef85",
                            Email = "Elyse_Feil1@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Madge Reichert",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELYSE_FEIL1@HOTMAIL.COM",
                            NormalizedUserName = "ELYSE_FEIL1@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM6TY5sKIhF/qBHGh2ZI2ujgia3koBbkPona5eJnFRFwKoyeAasmaDu1CaeZVajJfA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "f408ca08-a3be-48db-95b8-f5c3774d78fb",
                            TwoFactorEnabled = false,
                            UserName = "Elyse_Feil1@hotmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8335d09d-ccbe-4384-aa8a-a35b4c08d472",
                            Email = "Katarina_Sawayn@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Paige Bradtke",
                            LockoutEnabled = false,
                            NormalizedEmail = "KATARINA_SAWAYN@YAHOO.COM",
                            NormalizedUserName = "KATARINA_SAWAYN@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEODLGZf9TZ8LxDnt84RC9Lli2VYHwSkvv29NIeeeiTHyjHY7/NCCnbsn0C35q+4BrQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "634aa401-595e-471b-93a2-84b3b4f20503",
                            TwoFactorEnabled = false,
                            UserName = "Katarina_Sawayn@yahoo.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2425f948-a16f-4c3b-96e6-96a2444c2e4c",
                            Email = "Claire91@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Vance Bergnaum",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLAIRE91@HOTMAIL.COM",
                            NormalizedUserName = "CLAIRE91@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMcwLt4GSluTFkdFZzQ41JFIm2s28nUSSlJZkgLCZwdboWx1I51FwcAK5rQssaB4Nw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "bafa1a12-71db-445e-aa1e-7e0daf18125f",
                            TwoFactorEnabled = false,
                            UserName = "Claire91@hotmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbbc8f4c-05ef-4ea8-abd2-4b535276e647",
                            Email = "Russel_Bechtelar7@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Gail Schuppe",
                            LockoutEnabled = false,
                            NormalizedEmail = "RUSSEL_BECHTELAR7@HOTMAIL.COM",
                            NormalizedUserName = "RUSSEL_BECHTELAR7@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMAFlSEUd14kZJK9Oc4fGsJtCMoRYH+16rH3O15TVXY3mw+gzwNY3bDm1k8wA7UgRA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "772e0a1b-8e6b-4b8b-a7d0-477df4b8b451",
                            TwoFactorEnabled = false,
                            UserName = "Russel_Bechtelar7@hotmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b4796bf-c632-4c11-96d9-109335bc3bee",
                            Email = "Davon.Stamm@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Selina Douglas",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVON.STAMM@YAHOO.COM",
                            NormalizedUserName = "DAVON.STAMM@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOs7b+zjiFBvqjk2DWOQ1xtmycBPlkkzEhf4T9l0ZfdjRlv9fYLmELd4utkPfTBbpQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "a9ee2b63-b2d6-43bf-84e9-4c1e7c1bee1d",
                            TwoFactorEnabled = false,
                            UserName = "Davon.Stamm@yahoo.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f320139b-c3a5-4519-9a84-35cf58439391",
                            Email = "Elenora_Daniel@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Orrin Lubowitz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENORA_DANIEL@GMAIL.COM",
                            NormalizedUserName = "ELENORA_DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4fiOKOQUYCdNLV44ojcqgQ3JDr27OFQ/q0mzP5+b/moDRWCO5rRsuJjnKKSvDBrA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "a7278284-b3dd-498c-9560-a35dc0cc09dd",
                            TwoFactorEnabled = false,
                            UserName = "Elenora_Daniel@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3e73758-3d98-4731-a582-9999f1b3e17c",
                            Email = "Nelda14@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Lily Russel",
                            LockoutEnabled = false,
                            NormalizedEmail = "NELDA14@GMAIL.COM",
                            NormalizedUserName = "NELDA14@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDZU+cVMpG8Tpbl7NIZL3MU2OVX1C32GsmZr0xuJMzcdegFRZT4vb8j8tRvGU73v+Q==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "fb6355f3-33eb-4f63-abf8-01cd00ce4998",
                            TwoFactorEnabled = false,
                            UserName = "Nelda14@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e1eb12c-65cb-446d-a22d-91cb6de55022",
                            Email = "Krista.Leffler@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ulices Leuschke",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTA.LEFFLER@GMAIL.COM",
                            NormalizedUserName = "KRISTA.LEFFLER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJR+i6VYYD0V3yMJpiHfrHGiOLuEX7F/ozTikpqfIEyu2jLf+pXWZfavJwX1HtmvXw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "8993f7db-63a6-4066-8571-123e4c2b3b1a",
                            TwoFactorEnabled = false,
                            UserName = "Krista.Leffler@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithOne("HealthInsurance")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.HealthInsurance", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurance")
                        .IsRequired();

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
