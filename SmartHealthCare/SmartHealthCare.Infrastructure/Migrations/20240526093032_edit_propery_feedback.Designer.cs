// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240526093032_edit_propery_feedback")]
    partial class edit_propery_feedback
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "5671 Jacobi Course, New Noemi, Sudan",
                            Class = "9A",
                            Date = new DateTime(2009, 1, 19, 18, 18, 5, 335, DateTimeKind.Unspecified).AddTicks(5450),
                            Gender = true,
                            StudentCode = "Karli.Kihn12@gmail.com",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "9472 Kohler Plaza, South Tito, Niue",
                            Class = "9A",
                            Date = new DateTime(2014, 9, 6, 18, 35, 32, 904, DateTimeKind.Unspecified).AddTicks(5299),
                            Gender = true,
                            StudentCode = "Tyreek72@yahoo.com",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "918 Samara Divide, Lake Gonzalo, Guinea-Bissau",
                            Class = "9A",
                            Date = new DateTime(2011, 6, 4, 14, 12, 25, 343, DateTimeKind.Unspecified).AddTicks(50),
                            Gender = false,
                            StudentCode = "Garland_Wisozk@yahoo.com",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "431 Bergstrom Points, East Madisyn, Guatemala",
                            Class = "9A",
                            Date = new DateTime(2008, 2, 5, 7, 52, 21, 820, DateTimeKind.Unspecified).AddTicks(8416),
                            Gender = true,
                            StudentCode = "Pearline.Hegmann@gmail.com",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "2813 Camden Tunnel, Gulgowskiport, Bhutan",
                            Class = "9A",
                            Date = new DateTime(2009, 5, 28, 21, 32, 33, 914, DateTimeKind.Unspecified).AddTicks(6900),
                            Gender = false,
                            StudentCode = "Ricky_Swift45@yahoo.com",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "133 Gladys Course, Lake Ole, Lithuania",
                            Class = "9A",
                            Date = new DateTime(2011, 4, 25, 16, 2, 54, 659, DateTimeKind.Unspecified).AddTicks(9251),
                            Gender = true,
                            StudentCode = "Kristian.Schuster@gmail.com",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "19374 Stracke Station, West Sofiaville, Saint Barthelemy",
                            Class = "9A",
                            Date = new DateTime(2012, 3, 1, 2, 58, 53, 783, DateTimeKind.Unspecified).AddTicks(6622),
                            Gender = true,
                            StudentCode = "Harry_Yundt@gmail.com",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "964 Elisha Mountains, Lake Ruthieshire, Tonga",
                            Class = "9A",
                            Date = new DateTime(2008, 2, 21, 11, 31, 22, 304, DateTimeKind.Unspecified).AddTicks(6703),
                            Gender = true,
                            StudentCode = "Howard38@yahoo.com",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "830 Darryl Ways, Mitchellberg, Ukraine",
                            Class = "9A",
                            Date = new DateTime(2010, 9, 24, 13, 12, 58, 659, DateTimeKind.Unspecified).AddTicks(2485),
                            Gender = false,
                            StudentCode = "Cheyanne.Wiegand36@yahoo.com",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "36192 Flo Lodge, South Everardomouth, Canada",
                            Class = "9A",
                            Date = new DateTime(2009, 1, 5, 21, 37, 22, 326, DateTimeKind.Unspecified).AddTicks(4578),
                            Gender = false,
                            StudentCode = "Kaylie46@yahoo.com",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e034f538-687b-4b78-a8ec-49a8c8522a47",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELzZnz2fDQNFN7eFzv5ynnd1RIu2ndxfGYiRSPhHIGVTMGsJjhXwHiyL1CXzUI8qVA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "d8b64a3d-efc6-4468-899f-2c5005360620",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23860e39-9a95-4a15-a058-743e676d374a",
                            Email = "Karli.Kihn12@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Holden Jaskolski",
                            LockoutEnabled = false,
                            NormalizedEmail = "KARLI.KIHN12@GMAIL.COM",
                            NormalizedUserName = "KARLI.KIHN12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEiVKw7KW69IYRrqKYra198pfO29Stinw+j3Hq1O6/bjwyv3IGHMesRq924vlo97g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "accfad42-6e34-4dca-b7a1-7aa061808bc9",
                            TwoFactorEnabled = false,
                            UserName = "Karli.Kihn12@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7af4c030-b212-4cf6-8d6c-f6426f0b30aa",
                            Email = "Tyreek72@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Brown Trantow",
                            LockoutEnabled = false,
                            NormalizedEmail = "TYREEK72@YAHOO.COM",
                            NormalizedUserName = "TYREEK72@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEGmaLLP6r7FsbiRhskDv+ff8WLWT/0oVvFJfwWEVx+JH4i32/+c29ysSjXQcJRJgg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "d0481bf8-7d5d-48c3-9aa9-60e221e1bef5",
                            TwoFactorEnabled = false,
                            UserName = "Tyreek72@yahoo.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd061678-efc9-48c5-9823-02180d0c4493",
                            Email = "Garland_Wisozk@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Adelia Braun",
                            LockoutEnabled = false,
                            NormalizedEmail = "GARLAND_WISOZK@YAHOO.COM",
                            NormalizedUserName = "GARLAND_WISOZK@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAFfCjsxonX4BDiuhG/18knBCwInv9tInXLHt924t4JvhrVJD28qDg0cnSC+izgtCA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "1a5f7bea-a9ae-47c1-ad7b-ee6ddd9138e1",
                            TwoFactorEnabled = false,
                            UserName = "Garland_Wisozk@yahoo.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8cdbb427-98ef-466b-a684-68925582570c",
                            Email = "Pearline.Hegmann@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Milton Olson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEARLINE.HEGMANN@GMAIL.COM",
                            NormalizedUserName = "PEARLINE.HEGMANN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfLHIOxtrKhDDZg8QCnXC9cndCMKu/D2Pi2ZNA81xrI8/ktPdG1FcwrJGHOFqwJ5g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "013d4f96-67ec-44b2-84db-fef162c01ea6",
                            TwoFactorEnabled = false,
                            UserName = "Pearline.Hegmann@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9b4eb3d-0442-4daa-9316-068b21b976f2",
                            Email = "Ricky_Swift45@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Lexus Paucek",
                            LockoutEnabled = false,
                            NormalizedEmail = "RICKY_SWIFT45@YAHOO.COM",
                            NormalizedUserName = "RICKY_SWIFT45@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAE06B0BL5l/9e8tYTgPQz7nUG38juOtyMZCavAkHWczntHZCZ2L+SAV8SEp8BguyA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "02f8fc31-e762-4bb8-a16a-b6885f924ec7",
                            TwoFactorEnabled = false,
                            UserName = "Ricky_Swift45@yahoo.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cb03ce4-1817-4e50-88d3-94aa4e229283",
                            Email = "Kristian.Schuster@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Priscilla Bins",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTIAN.SCHUSTER@GMAIL.COM",
                            NormalizedUserName = "KRISTIAN.SCHUSTER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELxecAZwtQ9zTvflD4Io04v91kgiLQBrVl4Ydy+v4InZfQGP+1asjSEThVYi3RmTFg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "e4b59872-1846-4689-bee9-c4d0a1f92d77",
                            TwoFactorEnabled = false,
                            UserName = "Kristian.Schuster@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3af4bc5-712c-4beb-9a69-fcc2a846ee8f",
                            Email = "Harry_Yundt@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Tressa Wunsch",
                            LockoutEnabled = false,
                            NormalizedEmail = "HARRY_YUNDT@GMAIL.COM",
                            NormalizedUserName = "HARRY_YUNDT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIiTPjvHivtDbyv1vk+Qr2rewe1V/tYiTnaRr3NuMvzgAOputpavD0SsyG/gNJK6ZA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "ad4cfbba-65f1-48d1-b98f-bb953da8bc95",
                            TwoFactorEnabled = false,
                            UserName = "Harry_Yundt@gmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75b6f563-6918-457c-b138-4b86232eb385",
                            Email = "Howard38@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Retha Bartell",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOWARD38@YAHOO.COM",
                            NormalizedUserName = "HOWARD38@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA16CDDHEPdB+Lsk6kUURt/aUM/ZJB1ziMxtoJEasY2FfuHK5p9ytzHHUysFmPLq4A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "1d498f94-501d-4264-a956-cab5380c1ba2",
                            TwoFactorEnabled = false,
                            UserName = "Howard38@yahoo.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "806dea1c-be4c-4ac2-8140-5239a3260cb1",
                            Email = "Cheyanne.Wiegand36@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Monty Daugherty",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHEYANNE.WIEGAND36@YAHOO.COM",
                            NormalizedUserName = "CHEYANNE.WIEGAND36@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEELIqhTnW/J5Pn7RxIatFVwabod6TqkyAffpvgdszuCOBgU8qc30S79inKM73eCl9A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0747a3ad-0125-4f0c-ae5c-27839fe24805",
                            TwoFactorEnabled = false,
                            UserName = "Cheyanne.Wiegand36@yahoo.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "832805bd-ed4e-4e4b-b6dd-ee1064784b89",
                            Email = "Kaylie46@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Allen Treutel",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAYLIE46@YAHOO.COM",
                            NormalizedUserName = "KAYLIE46@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIchFjWGS/jsvs3qO30a2g4qQCMCoM6xsHWGOejC4rFCM++SXo/MWRq6KClRb4Wxeg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0d64cf91-bbca-45a0-bbff-2df00052ae09",
                            TwoFactorEnabled = false,
                            UserName = "Kaylie46@yahoo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithOne("HealthInsurance")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.HealthInsurance", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurance")
                        .IsRequired();

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
