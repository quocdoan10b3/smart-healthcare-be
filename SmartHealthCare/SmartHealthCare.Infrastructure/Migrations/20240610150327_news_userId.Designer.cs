// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240610150327_news_userId")]
    partial class news_userId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageMedicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineImport");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "3503 Yessenia Drive, Prohaskaville, Svalbard & Jan Mayen Islands",
                            Class = "9/1",
                            Date = new DateTime(2013, 2, 6, 5, 42, 12, 575, DateTimeKind.Unspecified).AddTicks(6708),
                            Gender = true,
                            StudentCode = "HS2020513",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "4843 Deonte Greens, South Letitiafurt, Ukraine",
                            Class = "9/1",
                            Date = new DateTime(2015, 2, 11, 19, 47, 41, 829, DateTimeKind.Unspecified).AddTicks(2966),
                            Gender = true,
                            StudentCode = "HS2022861",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "93992 Conn Radial, Port Vivashire, New Caledonia",
                            Class = "9/1",
                            Date = new DateTime(2011, 7, 26, 3, 1, 37, 553, DateTimeKind.Unspecified).AddTicks(7512),
                            Gender = false,
                            StudentCode = "HS2021355",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "6577 Hammes Forges, South Helgachester, Sri Lanka",
                            Class = "9/1",
                            Date = new DateTime(2018, 5, 12, 17, 42, 3, 763, DateTimeKind.Unspecified).AddTicks(6461),
                            Gender = false,
                            StudentCode = "HS2020965",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "7278 Bogisich Spur, Eltaborough, Azerbaijan",
                            Class = "9/1",
                            Date = new DateTime(2012, 10, 15, 9, 24, 44, 356, DateTimeKind.Unspecified).AddTicks(5230),
                            Gender = true,
                            StudentCode = "HS2021968",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "1606 Heaney Road, Port Zita, Cameroon",
                            Class = "9/1",
                            Date = new DateTime(2018, 12, 30, 18, 35, 9, 575, DateTimeKind.Unspecified).AddTicks(5646),
                            Gender = true,
                            StudentCode = "HS2023502",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "96489 Rempel Wall, West Londonchester, Grenada",
                            Class = "9/1",
                            Date = new DateTime(2014, 8, 8, 3, 40, 58, 741, DateTimeKind.Unspecified).AddTicks(8332),
                            Gender = true,
                            StudentCode = "HS2023225",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "2624 Stefan Dam, Leonoramouth, Saint Barthelemy",
                            Class = "9/1",
                            Date = new DateTime(2018, 12, 16, 20, 25, 30, 554, DateTimeKind.Unspecified).AddTicks(9460),
                            Gender = true,
                            StudentCode = "HS2020297",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "3472 Cummings Branch, North Camila, Dominica",
                            Class = "9/1",
                            Date = new DateTime(2011, 10, 29, 14, 37, 59, 81, DateTimeKind.Unspecified).AddTicks(6476),
                            Gender = false,
                            StudentCode = "HS2021949",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "134 Kory Flats, Lake Adrianna, Montserrat",
                            Class = "9/1",
                            Date = new DateTime(2014, 9, 4, 20, 59, 41, 811, DateTimeKind.Unspecified).AddTicks(9232),
                            Gender = false,
                            StudentCode = "HS2023661",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c200b4e1-23f8-4a53-b473-a9f8edbdbbb8",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIp8Zg9evsZve7nQlUXeCWe7ftzHnkssDF69viKT/7fn8jBuBqAsiAgaP9yju6FjA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5f6a3a37-fdd1-4ac6-801d-e0f5d167b00c",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe8b61f5-d270-4f23-be19-08feaa505da5",
                            Email = "Griffin_Shanahan@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Sydney Hyatt",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRIFFIN_SHANAHAN@HOTMAIL.COM",
                            NormalizedUserName = "HS2020513",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCIy4wIvisKeCWGkhjz6+tlLekoxyn6zVlmEGrHeO9kxJBFMr1PiOFXaR0lML/f2g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "b2442492-9bb6-4426-8caa-62c5b18f155d",
                            TwoFactorEnabled = false,
                            UserName = "HS2020513"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35bbcef9-e393-4989-a1c4-dc8a92c55318",
                            Email = "Agustina.Stracke@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rachelle Kunde",
                            LockoutEnabled = false,
                            NormalizedEmail = "AGUSTINA.STRACKE@GMAIL.COM",
                            NormalizedUserName = "HS2022861",
                            PasswordHash = "AQAAAAIAAYagAAAAEC2/638TwWfmQ9ECgE99ReeAwFu5i6Imk7+zIp0ZLiVUEFASs33Y6Uqp7iGa2MqU/A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "cba05978-3f61-4572-ba87-b1766335c53d",
                            TwoFactorEnabled = false,
                            UserName = "HS2022861"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be84358c-8744-4377-bebd-5f33b9fc9d24",
                            Email = "Dusty.Kris85@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Lulu Kuhlman",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUSTY.KRIS85@YAHOO.COM",
                            NormalizedUserName = "HS2021355",
                            PasswordHash = "AQAAAAIAAYagAAAAEGuE0DSsf9Id/8hSBZlrWkWSRcaMkYTvK3WPIyouegVZxgf/6cbf+gDB3qEd5cHZ+w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "952538df-0afe-4faf-a5c0-2892ed252571",
                            TwoFactorEnabled = false,
                            UserName = "HS2021355"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e4784f5-1e82-4a1c-a1ff-2f6df946660c",
                            Email = "Alf21@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Shayne Welch",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALF21@GMAIL.COM",
                            NormalizedUserName = "HS2020965",
                            PasswordHash = "AQAAAAIAAYagAAAAEPmHv/FpsU4czuH7e+yMvMlEpfl0sXaD9w1pSb9ZqJtzG3CH6qlxOmEGC5UpU+WySw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "fc470c2a-136a-4575-838e-d13d587d9b5b",
                            TwoFactorEnabled = false,
                            UserName = "HS2020965"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e6d6aba-7e73-4b27-8c10-b35ffb9cff6f",
                            Email = "Avis92@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Dagmar Ruecker",
                            LockoutEnabled = false,
                            NormalizedEmail = "AVIS92@YAHOO.COM",
                            NormalizedUserName = "HS2021968",
                            PasswordHash = "AQAAAAIAAYagAAAAEMLbRQ3YYk9I5FJCibuyp1t9L+WCZJmKGnatjVxVXL4D4jV2TNR8UXr57Zn3kIM3MQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "08a69aaf-e2e8-44f4-8229-50ef25898b49",
                            TwoFactorEnabled = false,
                            UserName = "HS2021968"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4ae19b3-55e3-45e2-aa27-59919f9c819a",
                            Email = "Audreanne72@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Nigel Brakus",
                            LockoutEnabled = false,
                            NormalizedEmail = "AUDREANNE72@HOTMAIL.COM",
                            NormalizedUserName = "HS2023502",
                            PasswordHash = "AQAAAAIAAYagAAAAEGZn+elnKaH6JCRM3hNCi6U7XefiFO1YlqwFe8hx1nukqbXkisJQDsvwWVM0y3VG9w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "514117c8-b087-490a-a54f-5708d950098b",
                            TwoFactorEnabled = false,
                            UserName = "HS2023502"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9f0b215-f4ab-4670-a337-37ee50e71ac7",
                            Email = "Gregory_Crooks76@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Christop Bayer",
                            LockoutEnabled = false,
                            NormalizedEmail = "GREGORY_CROOKS76@GMAIL.COM",
                            NormalizedUserName = "HS2023225",
                            PasswordHash = "AQAAAAIAAYagAAAAEDMSgvEVSznS8sk312aWo/S8Mg/7eaKktjurv+lHCHaRgRQBEKc2rjGEodmo8qAQZg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "667aeab6-b1df-4c09-a0d2-f5a703c5e9a8",
                            TwoFactorEnabled = false,
                            UserName = "HS2023225"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dfd93dd-78c5-427a-9046-b98410f3f667",
                            Email = "Loren_Hahn@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Virginie Yundt",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOREN_HAHN@YAHOO.COM",
                            NormalizedUserName = "HS2020297",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0zCh132wreDAK3c0xzXl/DHKBcyxU1K1ApKovMU0bWQvMmy+XUmVTGlNxLX4XUhQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "d5c15d18-b7ea-47c9-bf92-7e5d908590a5",
                            TwoFactorEnabled = false,
                            UserName = "HS2020297"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a71123b2-36d3-4e9b-ab70-8ea33f1360c2",
                            Email = "Eula62@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Gennaro Rice",
                            LockoutEnabled = false,
                            NormalizedEmail = "EULA62@YAHOO.COM",
                            NormalizedUserName = "HS2021949",
                            PasswordHash = "AQAAAAIAAYagAAAAEJfOIJG46ECoIub5XnQtA70i7sZsVONaLEx03GNpAZvStnmfnLPwDg0LRP4VcKNfIA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5fe18f79-ed74-407d-a948-2ca889a1b41d",
                            TwoFactorEnabled = false,
                            UserName = "HS2021949"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53b7df19-1132-4ac4-abca-495bf480f5f7",
                            Email = "Glenda.Rosenbaum36@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Lavinia Hagenes",
                            LockoutEnabled = false,
                            NormalizedEmail = "GLENDA.ROSENBAUM36@GMAIL.COM",
                            NormalizedUserName = "HS2023661",
                            PasswordHash = "AQAAAAIAAYagAAAAEH/uv/od1rgb0Lm9WmA2zi0sskxzDhpklnAK7CArqtUrMTuQK7P/bmoFC8ZHRPbuXA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "c42b3af5-dda8-4844-a152-af74f9301c07",
                            TwoFactorEnabled = false,
                            UserName = "HS2023661"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("Histories")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("MedicineImports")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Notification", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineImports");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
