// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240607073656_no-action-delete-staffId")]
    partial class noactiondeletestaffId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageMedicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("StaffId");

                    b.ToTable("MedicineImport");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "86295 Rice Village, West Noemi, Afghanistan",
                            Class = "9/1",
                            Date = new DateTime(2016, 2, 3, 22, 43, 33, 239, DateTimeKind.Unspecified).AddTicks(8457),
                            Gender = false,
                            StudentCode = "HS2022633",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "221 Nolan Parkway, Guiseppemouth, Chad",
                            Class = "9/1",
                            Date = new DateTime(2012, 2, 19, 19, 41, 17, 949, DateTimeKind.Unspecified).AddTicks(3972),
                            Gender = true,
                            StudentCode = "HS2020309",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "03679 Zora Trafficway, South Jodyborough, Canada",
                            Class = "9/1",
                            Date = new DateTime(2008, 11, 23, 18, 46, 46, 935, DateTimeKind.Unspecified).AddTicks(6639),
                            Gender = true,
                            StudentCode = "HS2021746",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "3016 Spinka Pass, Carmellafort, French Southern Territories",
                            Class = "9/1",
                            Date = new DateTime(2013, 5, 21, 21, 15, 50, 783, DateTimeKind.Unspecified).AddTicks(6624),
                            Gender = false,
                            StudentCode = "HS2020392",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "3165 Quigley Views, South Juston, Bahrain",
                            Class = "9/1",
                            Date = new DateTime(2010, 10, 23, 20, 35, 5, 569, DateTimeKind.Unspecified).AddTicks(8948),
                            Gender = true,
                            StudentCode = "HS2020368",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "451 Heathcote Alley, Lake Carmenberg, Republic of Korea",
                            Class = "9/1",
                            Date = new DateTime(2017, 1, 14, 1, 2, 34, 624, DateTimeKind.Unspecified).AddTicks(1929),
                            Gender = false,
                            StudentCode = "HS2022048",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "81347 Feest Estate, Emmiehaven, Burkina Faso",
                            Class = "9/1",
                            Date = new DateTime(2018, 12, 27, 8, 6, 32, 429, DateTimeKind.Unspecified).AddTicks(1280),
                            Gender = true,
                            StudentCode = "HS2020181",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "9135 Ova Corner, South Royalborough, Tuvalu",
                            Class = "9/1",
                            Date = new DateTime(2008, 2, 5, 8, 39, 25, 686, DateTimeKind.Unspecified).AddTicks(6958),
                            Gender = true,
                            StudentCode = "HS2020927",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "703 Brayan Ridges, East Silas, Romania",
                            Class = "9/1",
                            Date = new DateTime(2018, 10, 26, 19, 2, 3, 207, DateTimeKind.Unspecified).AddTicks(1960),
                            Gender = false,
                            StudentCode = "HS2021703",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "90146 Dicki Way, West Leolaborough, Bahamas",
                            Class = "9/1",
                            Date = new DateTime(2011, 4, 5, 20, 3, 9, 216, DateTimeKind.Unspecified).AddTicks(6595),
                            Gender = true,
                            StudentCode = "HS2022161",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49676115-9bb7-483a-9b6e-3615381b42b6",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFx+5UUN+0hIflT6WO/FOZ+DN6A90sJKI2wewJhPgixlaLAA8JQTFIwm79VkElSkrA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "2431e70c-77a9-4b6d-8db8-10575a76487c",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e3efa4f-7680-44d3-8fb9-883649cb4bc9",
                            Email = "Francisco_Hegmann@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Antonina Considine",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANCISCO_HEGMANN@HOTMAIL.COM",
                            NormalizedUserName = "HS2022633",
                            PasswordHash = "AQAAAAIAAYagAAAAEJp8hiMc92H1wvSTxI1EVYD7SNoBlG0+tWolVQmlEEPjAWbPy+BPpWFQcBTTjEdebw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "e375c328-d9b6-40ba-a724-58a940cd568b",
                            TwoFactorEnabled = false,
                            UserName = "HS2022633"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0c467b2-e164-4b20-9cf4-5abe6fb0512c",
                            Email = "Roberto67@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Eulah Ondricka",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROBERTO67@GMAIL.COM",
                            NormalizedUserName = "HS2020309",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0iBcWqSgp6yqf3wjIcZaNC/3pttpX+bCQDwa1KIH4xwzOjDz0yyMEJC1jH6zK+8g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "c3b89e45-d2b1-4c3b-aad3-a56b9f44c156",
                            TwoFactorEnabled = false,
                            UserName = "HS2020309"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa024185-6bb6-4112-ae98-30fd7168defb",
                            Email = "Mateo.Brakus@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Hassie McClure",
                            LockoutEnabled = false,
                            NormalizedEmail = "MATEO.BRAKUS@YAHOO.COM",
                            NormalizedUserName = "HS2021746",
                            PasswordHash = "AQAAAAIAAYagAAAAEH0au/2vdyYJl0vPWvIyKNV50WBB4E46bnEVDNCL/ymZbvyAH9ov85ecNVf/irwsog==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "e857db35-cef7-44b2-b61e-8f733f052396",
                            TwoFactorEnabled = false,
                            UserName = "HS2021746"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d12ef29-d103-41e8-9b61-78d1935f8346",
                            Email = "Reggie62@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nicolette Breitenberg",
                            LockoutEnabled = false,
                            NormalizedEmail = "REGGIE62@GMAIL.COM",
                            NormalizedUserName = "HS2020392",
                            PasswordHash = "AQAAAAIAAYagAAAAEDBYtCObSQRtKd8ZdrMf7A9LJMreNKAgtMTnP1ogfvYoCjHl7SNgmZbxIVqV28Q4rQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "eef47800-ee87-469a-a80b-560fd0802fd5",
                            TwoFactorEnabled = false,
                            UserName = "HS2020392"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38b0f1a4-3cd1-4787-a05c-46e3278660af",
                            Email = "Raleigh.Wiegand@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Angus Harber",
                            LockoutEnabled = false,
                            NormalizedEmail = "RALEIGH.WIEGAND@GMAIL.COM",
                            NormalizedUserName = "HS2020368",
                            PasswordHash = "AQAAAAIAAYagAAAAEJAnttPWkPfmmey6zMj+VkDlz43cUNoNAamESaMRQShl9U43yv8w4iHJIEXSAOwB0w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "7faf4d17-0ff3-407b-9654-ecaa8ecff3f6",
                            TwoFactorEnabled = false,
                            UserName = "HS2020368"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9614caa4-8700-4640-b4df-546ea66ddcc3",
                            Email = "Yasmine.Von1@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Susie Dickinson",
                            LockoutEnabled = false,
                            NormalizedEmail = "YASMINE.VON1@YAHOO.COM",
                            NormalizedUserName = "HS2022048",
                            PasswordHash = "AQAAAAIAAYagAAAAEANBDhJh93tA0ENnRCSY/7hrjPipzCBg33WMFkkKKPpBGBDITYV9GNaYEI3n9LPUVg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "a3b56181-24ee-4d85-afc3-c1c8a9bec6c7",
                            TwoFactorEnabled = false,
                            UserName = "HS2022048"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5536bec1-cd03-430a-ae57-773e292978b4",
                            Email = "Elfrieda_Veum@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Tate Nader",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELFRIEDA_VEUM@YAHOO.COM",
                            NormalizedUserName = "HS2020181",
                            PasswordHash = "AQAAAAIAAYagAAAAEMDLf4dhjYWM153GeJLB+uiMbODdcWWEzHc81VKt7YaH+5MROgqcSMk84lVh9rPVLA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "4f567c4e-a314-4dd5-856a-8239ac1a718f",
                            TwoFactorEnabled = false,
                            UserName = "HS2020181"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9b968ba-506d-4058-8e5f-f5733bdcc9ac",
                            Email = "Jameson_Schaefer47@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Horace Hagenes",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMESON_SCHAEFER47@GMAIL.COM",
                            NormalizedUserName = "HS2020927",
                            PasswordHash = "AQAAAAIAAYagAAAAEN28IoqMFNbSaCxrFfjcqICmLtQ8yP6nrm+JtyxPB3ebufF8pU00sJkZlbPrIYen0w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "6f2f06e2-e980-4c30-adc7-2e796e3a9f69",
                            TwoFactorEnabled = false,
                            UserName = "HS2020927"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d6f2b82-9297-4e8c-83d0-e9b30d52b3ea",
                            Email = "April.Conn11@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Mattie Boyer",
                            LockoutEnabled = false,
                            NormalizedEmail = "APRIL.CONN11@GMAIL.COM",
                            NormalizedUserName = "HS2021703",
                            PasswordHash = "AQAAAAIAAYagAAAAEPuA6Z8y8KpZlWht3ZjbHwiVdughiUSfIRxAN++QxV2ikIHvAIOrKz5UXx/zln+w2w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "352520c5-d279-4987-aef2-28e6ae3ef244",
                            TwoFactorEnabled = false,
                            UserName = "HS2021703"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b051bd5-b85d-4fff-b1b0-4aa13a5c447f",
                            Email = "Victor_Koelpin@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Leslie Wyman",
                            LockoutEnabled = false,
                            NormalizedEmail = "VICTOR_KOELPIN@YAHOO.COM",
                            NormalizedUserName = "HS2022161",
                            PasswordHash = "AQAAAAIAAYagAAAAEEnJMTQyZTjKL2/pWd4H/olgKEfv4qSl+3TtpGJU6CWBkEvFAnfqDaVycFMGmDa4NQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "ed1e6aed-7da8-4036-b833-25d04ade62f7",
                            TwoFactorEnabled = false,
                            UserName = "HS2022161"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("Histories")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("MedicineImports")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("MedicineImports")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Notification", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("Notifications")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineImports");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");

                    b.Navigation("MedicineImports");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
