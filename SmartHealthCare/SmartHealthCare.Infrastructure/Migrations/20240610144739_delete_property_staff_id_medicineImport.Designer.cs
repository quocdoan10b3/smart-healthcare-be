// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240610144739_delete_property_staff_id_medicineImport")]
    partial class delete_property_staff_id_medicineImport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageMedicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineImport");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "25120 Rempel Expressway, Alimouth, Burundi",
                            Class = "9/1",
                            Date = new DateTime(2010, 3, 13, 23, 6, 58, 244, DateTimeKind.Unspecified).AddTicks(8297),
                            Gender = true,
                            StudentCode = "HS2023466",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "0831 Jacobson River, Lake Grover, Lithuania",
                            Class = "9/1",
                            Date = new DateTime(2010, 9, 14, 13, 46, 24, 588, DateTimeKind.Unspecified).AddTicks(9855),
                            Gender = true,
                            StudentCode = "HS2022433",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "673 Doug Well, Morissettemouth, Azerbaijan",
                            Class = "9/1",
                            Date = new DateTime(2008, 8, 11, 9, 26, 43, 765, DateTimeKind.Unspecified).AddTicks(1388),
                            Gender = true,
                            StudentCode = "HS2021329",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "25169 Isom Course, Devynmouth, Germany",
                            Class = "9/1",
                            Date = new DateTime(2018, 6, 24, 1, 41, 41, 79, DateTimeKind.Unspecified).AddTicks(474),
                            Gender = true,
                            StudentCode = "HS2020473",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "4458 Joelle Mountains, South Tyshawnburgh, Northern Mariana Islands",
                            Class = "9/1",
                            Date = new DateTime(2009, 5, 1, 16, 2, 24, 954, DateTimeKind.Unspecified).AddTicks(1911),
                            Gender = true,
                            StudentCode = "HS2020884",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "49799 Una Mountain, Rhealand, Haiti",
                            Class = "9/1",
                            Date = new DateTime(2008, 11, 30, 4, 12, 59, 18, DateTimeKind.Unspecified).AddTicks(3160),
                            Gender = false,
                            StudentCode = "HS2022224",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "94119 Kay Hill, Flatleyview, Cyprus",
                            Class = "9/1",
                            Date = new DateTime(2009, 12, 21, 6, 15, 57, 21, DateTimeKind.Unspecified).AddTicks(2234),
                            Gender = true,
                            StudentCode = "HS2023890",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "37694 Koelpin Creek, Olsonshire, Philippines",
                            Class = "9/1",
                            Date = new DateTime(2012, 12, 11, 9, 58, 51, 819, DateTimeKind.Unspecified).AddTicks(2352),
                            Gender = false,
                            StudentCode = "HS2021787",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "84227 Amelia Square, Larsonfurt, Sudan",
                            Class = "9/1",
                            Date = new DateTime(2010, 6, 29, 19, 12, 18, 771, DateTimeKind.Unspecified).AddTicks(991),
                            Gender = false,
                            StudentCode = "HS2021724",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "339 Stacy Route, North Johannaburgh, Sudan",
                            Class = "9/1",
                            Date = new DateTime(2013, 1, 23, 13, 41, 58, 479, DateTimeKind.Unspecified).AddTicks(4276),
                            Gender = false,
                            StudentCode = "HS2023466",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a43e5bc-851d-4e6e-a73a-a33d1ab88d4b",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5FJoeO6lJSZ+pQnecMwBzsCdxRziMebce1jyrHEvfKWbSmrqakfx8iLupqiqyAfg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5df2f6b2-d330-4f2c-af23-00e97ecdf835",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1de76dac-cbfe-4469-894c-b7d324647934",
                            Email = "Emilia.Deckow55@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Shayna Klocko",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILIA.DECKOW55@HOTMAIL.COM",
                            NormalizedUserName = "HS2023466",
                            PasswordHash = "AQAAAAIAAYagAAAAEHqQuQbh2O2+U/jXE1vAiV6+bfQtE02c5z5itDAsy2Km+FIxBddPdJPTaUoaSEy7aw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "29c0b329-b34d-48b1-9233-90eea9638f1a",
                            TwoFactorEnabled = false,
                            UserName = "HS2023466"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd22a41e-aca2-464d-bc95-b92335a51ad2",
                            Email = "Rene_Breitenberg78@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Kamren Heaney",
                            LockoutEnabled = false,
                            NormalizedEmail = "RENE_BREITENBERG78@YAHOO.COM",
                            NormalizedUserName = "HS2022433",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2I5YJR25EMPx1T6sc2ofKhF3yiLmdD5IgUfLBrKCsTB2W8Mg2HzCPOFeuy2reC4g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "b03df7fb-7aca-4927-ab73-ed65dfe9937c",
                            TwoFactorEnabled = false,
                            UserName = "HS2022433"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf01a55b-2eeb-47ff-839b-6c5218a0afac",
                            Email = "Bessie_Murray55@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rose Goyette",
                            LockoutEnabled = false,
                            NormalizedEmail = "BESSIE_MURRAY55@GMAIL.COM",
                            NormalizedUserName = "HS2021329",
                            PasswordHash = "AQAAAAIAAYagAAAAEECUArZt6eReL+Rz0l8MBQLo2uGugoyeFt+9Lku+vH5baGGVy3B01w5fAccXNaDXDA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "c2b0b6e2-1634-415f-be68-1a54a853fb21",
                            TwoFactorEnabled = false,
                            UserName = "HS2021329"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc439c5b-9d0a-45ee-a993-cdb59b9e9c64",
                            Email = "Josue_Kilback65@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Hazle Reinger",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSUE_KILBACK65@GMAIL.COM",
                            NormalizedUserName = "HS2020473",
                            PasswordHash = "AQAAAAIAAYagAAAAECGNXx+K9BjybMtT4261LJfQeXA3G+fyGYU/ijfiZ9Nrc2kmDM83I2WP2R36UVUWdQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "2e66efae-790c-45d6-b285-ceb9252d7a94",
                            TwoFactorEnabled = false,
                            UserName = "HS2020473"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c291ad0a-cf6f-450f-8d3a-e22072d65b77",
                            Email = "Peggie.Rosenbaum8@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Jalen Schaefer",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEGGIE.ROSENBAUM8@YAHOO.COM",
                            NormalizedUserName = "HS2020884",
                            PasswordHash = "AQAAAAIAAYagAAAAEM9QiFhzsE+mJpo3/J3aPioLR2B08pouKTvRc4fLFoWkeHIhiZ2vu4rOvOxQPskq+A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "b683d45b-c58f-486a-9b2a-c92b030054d3",
                            TwoFactorEnabled = false,
                            UserName = "HS2020884"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a800de0-55c5-4d88-bd26-c85c58db5c2c",
                            Email = "Mavis_Treutel@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Dannie Denesik",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAVIS_TREUTEL@YAHOO.COM",
                            NormalizedUserName = "HS2022224",
                            PasswordHash = "AQAAAAIAAYagAAAAEBR021q77IJtGcPvZMqtzwjuSyncyb0sRfkztbKonb0De7OB0AcfBTaRto+VACdDhA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "a8c36cd6-0cbb-4c8c-a2a9-d0977455d323",
                            TwoFactorEnabled = false,
                            UserName = "HS2022224"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "747c8121-74ce-4341-949c-618e9d8dec20",
                            Email = "Patricia.Collins@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Jordon Gaylord",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATRICIA.COLLINS@HOTMAIL.COM",
                            NormalizedUserName = "HS2023890",
                            PasswordHash = "AQAAAAIAAYagAAAAEJCMX8IzAQ8u/Sfz2BjLYPfNr7xCW6GUh2/5gYdA6pHTTvlX5OYXqA4ml1uVrdTqaA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "06b943bc-1b31-4256-a898-acb90082cc71",
                            TwoFactorEnabled = false,
                            UserName = "HS2023890"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc3ff5f3-373e-4482-bcb8-bc251036c1a3",
                            Email = "Brooks_Conroy51@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Palma Russel",
                            LockoutEnabled = false,
                            NormalizedEmail = "BROOKS_CONROY51@HOTMAIL.COM",
                            NormalizedUserName = "HS2021787",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFLAD2AoDX9WaUtfDkJJsfWOP3WhuamyofoWfelRbhzGRRCh2Jp/qAe5vzCuIdQNw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "be444321-482d-4bcb-9154-39d48a71955b",
                            TwoFactorEnabled = false,
                            UserName = "HS2021787"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a137fc3e-edc3-42f2-82cb-404fd4ae6a89",
                            Email = "Baron9@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Lorna Bernier",
                            LockoutEnabled = false,
                            NormalizedEmail = "BARON9@GMAIL.COM",
                            NormalizedUserName = "HS2021724",
                            PasswordHash = "AQAAAAIAAYagAAAAEJH0Axt1oHebUT+VNH/2q++YEu5TM4KVXWYcWQh1r9ej0t4dgi5mseAN10RhkKaCpg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0b7e5303-6840-40e9-89ce-7e8259977bd2",
                            TwoFactorEnabled = false,
                            UserName = "HS2021724"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97cb0448-584b-4f42-b013-ded93ca22b82",
                            Email = "Ulices.Lebsack44@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosina Lindgren",
                            LockoutEnabled = false,
                            NormalizedEmail = "ULICES.LEBSACK44@HOTMAIL.COM",
                            NormalizedUserName = "HS2023466",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/o/d3SYLVz/FWyyp5+0QeNivV1vKHzd6YObN4l8q5Wt+I6x0R+Jj9xQE9jK1zbGQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "038b40a1-6513-414f-96bc-c69619aa6d41",
                            TwoFactorEnabled = false,
                            UserName = "HS2023466"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("Histories")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("MedicineImports")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Notification", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("Notifications")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineImports");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
