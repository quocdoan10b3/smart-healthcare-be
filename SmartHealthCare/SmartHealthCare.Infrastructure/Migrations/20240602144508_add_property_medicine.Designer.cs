// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240602144508_add_property_medicine")]
    partial class add_property_medicine
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "27256 Hansen Cape, Caylaside, Falkland Islands (Malvinas)",
                            Class = "9A",
                            Date = new DateTime(2018, 7, 5, 23, 20, 51, 52, DateTimeKind.Unspecified).AddTicks(6450),
                            Gender = false,
                            StudentCode = "HS2022937",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "7167 Tyrese Parkway, North Ottis, Sri Lanka",
                            Class = "9A",
                            Date = new DateTime(2017, 4, 4, 5, 41, 14, 176, DateTimeKind.Unspecified).AddTicks(3189),
                            Gender = false,
                            StudentCode = "HS2023150",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "87016 Talia Springs, New Orlandside, South Africa",
                            Class = "9A",
                            Date = new DateTime(2011, 2, 22, 2, 1, 21, 644, DateTimeKind.Unspecified).AddTicks(2548),
                            Gender = false,
                            StudentCode = "HS2020112",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "0630 Jast Inlet, Lake Zeldaview, Denmark",
                            Class = "9A",
                            Date = new DateTime(2011, 3, 31, 0, 30, 17, 57, DateTimeKind.Unspecified).AddTicks(4718),
                            Gender = true,
                            StudentCode = "HS2023302",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "45281 Rodriguez Walks, Lake Donavonton, Nauru",
                            Class = "9A",
                            Date = new DateTime(2008, 2, 25, 1, 23, 34, 795, DateTimeKind.Unspecified).AddTicks(2279),
                            Gender = false,
                            StudentCode = "HS2021343",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "0891 Conroy Coves, East Christelle, Yemen",
                            Class = "9A",
                            Date = new DateTime(2012, 12, 14, 5, 21, 25, 590, DateTimeKind.Unspecified).AddTicks(3289),
                            Gender = true,
                            StudentCode = "HS2020104",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "485 Bailey Brook, East Othaville, Malaysia",
                            Class = "9A",
                            Date = new DateTime(2009, 8, 22, 5, 17, 57, 565, DateTimeKind.Unspecified).AddTicks(2328),
                            Gender = false,
                            StudentCode = "HS2023466",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "436 Hollis Ports, Westleyshire, Congo",
                            Class = "9A",
                            Date = new DateTime(2009, 7, 23, 20, 54, 52, 387, DateTimeKind.Unspecified).AddTicks(8834),
                            Gender = false,
                            StudentCode = "HS2020977",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "972 Emard Village, Collinstown, Congo",
                            Class = "9A",
                            Date = new DateTime(2008, 12, 2, 22, 23, 56, 335, DateTimeKind.Unspecified).AddTicks(5256),
                            Gender = false,
                            StudentCode = "HS2022109",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "499 Swaniawski Pine, Adrielbury, Eritrea",
                            Class = "9A",
                            Date = new DateTime(2018, 6, 9, 0, 6, 52, 65, DateTimeKind.Unspecified).AddTicks(7475),
                            Gender = true,
                            StudentCode = "HS2022675",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57787e4c-78c3-48b8-a7e2-6aee0ce702f2",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHTL9ctYYsT0qD65JIfi2cPq6JxkHwmeEppy+IsNbtAF9TTX9O+ntW+oPoUb+2yAQw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5431d79d-9fc4-46d0-93ed-e9767d7f62ab",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8445657c-6f97-4368-89c2-a08d95d126d1",
                            Email = "Bryon63@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Lina Lesch",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRYON63@YAHOO.COM",
                            NormalizedUserName = "HS2022937",
                            PasswordHash = "AQAAAAIAAYagAAAAEBNOcyWowkdOzOPdpbMyzQlGezTfh6qyyefNWNQMKJ/fU+pGpJYicLCJJBJTH4+T6A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0891f46f-f564-44e2-b50b-bba9126fde70",
                            TwoFactorEnabled = false,
                            UserName = "HS2022937"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "466e2c3d-084c-4dc5-aff3-399b21ea21de",
                            Email = "Charlene.Beatty87@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Justice Shanahan",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLENE.BEATTY87@GMAIL.COM",
                            NormalizedUserName = "HS2023150",
                            PasswordHash = "AQAAAAIAAYagAAAAEM/ubh/vpSD8qOHRHC6IJxYYl+ZyyFrdRIu0GAKKt4N0ywxpV4TYm/lh0wMjYrls4Q==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "fbc8c1bd-334d-4ce8-8ebd-b447c7c57e1c",
                            TwoFactorEnabled = false,
                            UserName = "HS2023150"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "143410b6-d924-420d-85d9-f64be2477a8a",
                            Email = "Thurman.Kuhic@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Kara Hauck",
                            LockoutEnabled = false,
                            NormalizedEmail = "THURMAN.KUHIC@YAHOO.COM",
                            NormalizedUserName = "HS2020112",
                            PasswordHash = "AQAAAAIAAYagAAAAEBihzuglW2TBUltetU26VfDgBuR055OPX2nurOk5FS1RWNUuEHbOtgn4DJUzdj5ywQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "7ef3e6ac-9155-4266-b0de-68aa01d62d62",
                            TwoFactorEnabled = false,
                            UserName = "HS2020112"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48489536-e58c-4ec9-be6e-3bbddd26ff20",
                            Email = "Obie.Kling28@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Dejon Bashirian",
                            LockoutEnabled = false,
                            NormalizedEmail = "OBIE.KLING28@YAHOO.COM",
                            NormalizedUserName = "HS2023302",
                            PasswordHash = "AQAAAAIAAYagAAAAELVSewVXYOwHXxvyYDUh+aSucEMM+qhlq8tSGX8rvLTMe0LRfUTTose3h/UtdTetZQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "e927f747-3ab7-49bb-8871-a57ac87a3651",
                            TwoFactorEnabled = false,
                            UserName = "HS2023302"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc5f0c97-6b82-4e50-a584-a973c5527ad9",
                            Email = "Joaquin67@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Margarete Heidenreich",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOAQUIN67@GMAIL.COM",
                            NormalizedUserName = "HS2021343",
                            PasswordHash = "AQAAAAIAAYagAAAAECn+324PkO0xXFxf7+Cc2RSJkGT4e3A3FY5pwbzbPv0BDueGUUbA+abyf/X54hX4WA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "40937428-1a0e-4945-a117-996ce8c713e6",
                            TwoFactorEnabled = false,
                            UserName = "HS2021343"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b375bd4f-4d94-452a-8362-6c5b51dc13d2",
                            Email = "Alyson_Bahringer32@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Katharina Gaylord",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALYSON_BAHRINGER32@HOTMAIL.COM",
                            NormalizedUserName = "HS2020104",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvTXeJcAQBQ359gp/0+9eQPfvxT3kBoBWYV3Vs6i+62GzRK1XiQHmmc/fQr9/Dd2w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "321d9498-3637-4ffc-85ec-8665464c159f",
                            TwoFactorEnabled = false,
                            UserName = "HS2020104"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3a8ec03-1df9-4957-af4e-f4884ebdb5be",
                            Email = "Kathryn.McKenzie54@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Rozella Lubowitz",
                            LockoutEnabled = false,
                            NormalizedEmail = "KATHRYN.MCKENZIE54@HOTMAIL.COM",
                            NormalizedUserName = "HS2023466",
                            PasswordHash = "AQAAAAIAAYagAAAAEEuyf4TOkpGltuTWMFvgTcj48kgGBp7JzX5u/L1I9fiqV7SnSwLpFz+6fb+og64wlA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "8eaf04cb-39a9-46b9-9474-ba4247a88a03",
                            TwoFactorEnabled = false,
                            UserName = "HS2023466"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62066ce6-2ca2-4bc3-826d-97a9b71a2085",
                            Email = "Delta40@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Kadin Ruecker",
                            LockoutEnabled = false,
                            NormalizedEmail = "DELTA40@YAHOO.COM",
                            NormalizedUserName = "HS2020977",
                            PasswordHash = "AQAAAAIAAYagAAAAEGeU10ucSgfzXeM0P5Ibwvdpdvt5ETApKiV563U2TKwP+WhkpdccUThAs7N1J7P1lA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "04a72a06-d78b-4dc3-a9f4-2f82e4bd23da",
                            TwoFactorEnabled = false,
                            UserName = "HS2020977"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2594850-60c3-448d-9c2d-77c3201ebf26",
                            Email = "Carolyne.Predovic41@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Felipe Corkery",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAROLYNE.PREDOVIC41@GMAIL.COM",
                            NormalizedUserName = "HS2022109",
                            PasswordHash = "AQAAAAIAAYagAAAAEKbRBH1XvvMNoagL7XGpKpu4LILiDDFJG8kKeXMBgjPE9fd/DChh8yETsn7YpSaQUQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "44569b7f-209b-4d64-9971-35743b8db78b",
                            TwoFactorEnabled = false,
                            UserName = "HS2022109"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a55ee47-8cab-4b55-b46b-8ee52663136b",
                            Email = "Mason.Schowalter86@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Jayde Skiles",
                            LockoutEnabled = false,
                            NormalizedEmail = "MASON.SCHOWALTER86@HOTMAIL.COM",
                            NormalizedUserName = "HS2022675",
                            PasswordHash = "AQAAAAIAAYagAAAAEE7q/h4tQmIgvQmJZoBGVUqUxZhXmyZsMYxoY98GchPOFvN47fTRxDLrte3Fx5T/TQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "9d574c05-330f-4821-8ea4-afb38409f6a7",
                            TwoFactorEnabled = false,
                            UserName = "HS2022675"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
