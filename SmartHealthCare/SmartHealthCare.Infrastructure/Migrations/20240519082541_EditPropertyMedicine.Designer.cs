// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240519082541_EditPropertyMedicine")]
    partial class EditPropertyMedicine
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "83412 Orn Trafficway, New Mackenzie, Bolivia",
                            Class = "9A",
                            Date = new DateTime(2014, 5, 29, 21, 40, 9, 342, DateTimeKind.Unspecified).AddTicks(4472),
                            Gender = true,
                            StudentCode = "Adrain_Konopelski70@yahoo.com",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "10955 Kunze Prairie, Lake Angelicamouth, Palestinian Territory",
                            Class = "9A",
                            Date = new DateTime(2016, 2, 22, 7, 14, 47, 659, DateTimeKind.Unspecified).AddTicks(2204),
                            Gender = false,
                            StudentCode = "Coby_Zulauf@gmail.com",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "950 Walter Hill, Lake Annamarie, Jamaica",
                            Class = "9A",
                            Date = new DateTime(2017, 3, 25, 4, 15, 1, 121, DateTimeKind.Unspecified).AddTicks(3683),
                            Gender = false,
                            StudentCode = "Anabel_Lind9@gmail.com",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "8225 Bayer Shoal, New Alphonsoborough, Belize",
                            Class = "9A",
                            Date = new DateTime(2015, 11, 10, 21, 41, 17, 581, DateTimeKind.Unspecified).AddTicks(3269),
                            Gender = false,
                            StudentCode = "Tyler54@hotmail.com",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "48340 Muller Walks, South Rosalinda, Somalia",
                            Class = "9A",
                            Date = new DateTime(2012, 10, 12, 20, 55, 35, 304, DateTimeKind.Unspecified).AddTicks(2135),
                            Gender = false,
                            StudentCode = "Ella_Mohr@gmail.com",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "4979 Sadie Turnpike, Port Wilmerside, French Southern Territories",
                            Class = "9A",
                            Date = new DateTime(2016, 1, 5, 21, 7, 9, 418, DateTimeKind.Unspecified).AddTicks(4804),
                            Gender = false,
                            StudentCode = "Malika37@hotmail.com",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "3158 Candelario Rest, Burleyview, Iraq",
                            Class = "9A",
                            Date = new DateTime(2012, 3, 21, 1, 58, 57, 887, DateTimeKind.Unspecified).AddTicks(3092),
                            Gender = true,
                            StudentCode = "Elwin.Reichert@hotmail.com",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "336 Ernser Place, East Clementside, Anguilla",
                            Class = "9A",
                            Date = new DateTime(2017, 10, 18, 13, 46, 11, 70, DateTimeKind.Unspecified).AddTicks(9176),
                            Gender = false,
                            StudentCode = "Remington.Adams@yahoo.com",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "36022 Lowe Underpass, Lake Benny, Guinea-Bissau",
                            Class = "9A",
                            Date = new DateTime(2016, 5, 4, 20, 45, 52, 168, DateTimeKind.Unspecified).AddTicks(8904),
                            Gender = true,
                            StudentCode = "Abigayle_Monahan@yahoo.com",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "4010 Kamren Court, Ullrichburgh, Lebanon",
                            Class = "9A",
                            Date = new DateTime(2016, 7, 27, 20, 2, 48, 297, DateTimeKind.Unspecified).AddTicks(3659),
                            Gender = true,
                            StudentCode = "Edd_Treutel98@hotmail.com",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87873e02-afb5-4337-a28f-ce10c7250f48",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxDUkNdPnwAtcACzBra1OFpYwEupc4GmMvRWhem9o1ZtC/TSrXvddlVuqNzWbyKEQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0ddec862-2dd0-46f3-8c41-28b279da070d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f925165-884c-41de-b525-f263942abbdb",
                            Email = "Adrain_Konopelski70@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Marie Upton",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADRAIN_KONOPELSKI70@YAHOO.COM",
                            NormalizedUserName = "ADRAIN_KONOPELSKI70@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHsEvC/OCkDKmyVJfl4y7KichtE8XCiGQq8BbbuY5wSQZpiARyATq+sAfZo+JAvsKg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "4bc919bf-8e9b-48a1-adfa-499f30b54247",
                            TwoFactorEnabled = false,
                            UserName = "Adrain_Konopelski70@yahoo.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a770c275-7c5c-4606-bc99-82a02b48e99b",
                            Email = "Coby_Zulauf@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Bryce Wuckert",
                            LockoutEnabled = false,
                            NormalizedEmail = "COBY_ZULAUF@GMAIL.COM",
                            NormalizedUserName = "COBY_ZULAUF@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEH5LahLVsL5KgcllPJxoRTH7/i/yYaxyB+vr0KUf/bQjHWa1kc4QpceIoydMb2yg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "15c290db-ff06-424a-947c-69cb98cfbd55",
                            TwoFactorEnabled = false,
                            UserName = "Coby_Zulauf@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27a9bc34-7886-4f25-906d-26cfb8170a98",
                            Email = "Anabel_Lind9@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Vincenza O'Reilly",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANABEL_LIND9@GMAIL.COM",
                            NormalizedUserName = "ANABEL_LIND9@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHa/3lducxvAJ9+omLMAgv0jI7dGGUJYNF+0PyLaBQXzNOcl4+KtMokL5MFQkvTotQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "55949f3c-c783-4519-9596-d2298a4cca9c",
                            TwoFactorEnabled = false,
                            UserName = "Anabel_Lind9@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15684063-09b3-4f93-ab70-8bdb1ca36c7a",
                            Email = "Tyler54@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Jordi Schmeler",
                            LockoutEnabled = false,
                            NormalizedEmail = "TYLER54@HOTMAIL.COM",
                            NormalizedUserName = "TYLER54@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED0chRPkNJpUn4CoAbcWlHpSxNNwehDSDh3I9e7ywf3QLtoj2NSZiq4fQvNoBQu7YQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "47982f72-254b-4f62-8c87-ca740af0b0c2",
                            TwoFactorEnabled = false,
                            UserName = "Tyler54@hotmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a95037ff-f00f-4c39-9ab8-1361a1b9350e",
                            Email = "Ella_Mohr@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Theodora Klein",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLA_MOHR@GMAIL.COM",
                            NormalizedUserName = "ELLA_MOHR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFf71bx3q0YAD+DvO4tSaIzRi5sgQhqb3/JeH/a0EM41VYbGu5C3Ln064KAG+wgmvw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "12a06213-84d9-47ef-93f8-53aa20c890ed",
                            TwoFactorEnabled = false,
                            UserName = "Ella_Mohr@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1de12dc6-328a-481a-8c9a-905448003e58",
                            Email = "Malika37@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Hazel Bartell",
                            LockoutEnabled = false,
                            NormalizedEmail = "MALIKA37@HOTMAIL.COM",
                            NormalizedUserName = "MALIKA37@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDZEOBSdcYIJMhBZaSQngz8BerW5NXzlG7z823bMp0b/aWRsabpN/7nwLgzklv3NaA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5ba45538-70e8-4c9e-b728-6331d4cffdae",
                            TwoFactorEnabled = false,
                            UserName = "Malika37@hotmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9c91110-699f-4796-8dda-6aac97885a24",
                            Email = "Elwin.Reichert@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Eugenia Schaden",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELWIN.REICHERT@HOTMAIL.COM",
                            NormalizedUserName = "ELWIN.REICHERT@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJODgrXTB7/YaJhCez8s+LhEG+18RrJbXv/AVI2cpn7jj9MrYEYjR+MgG9Sc4B1XGg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "8461b51d-6845-476e-b8bf-731b1c8876bb",
                            TwoFactorEnabled = false,
                            UserName = "Elwin.Reichert@hotmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fd553f6-964d-465b-8b41-d25dfdc878b4",
                            Email = "Remington.Adams@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Lauriane Lehner",
                            LockoutEnabled = false,
                            NormalizedEmail = "REMINGTON.ADAMS@YAHOO.COM",
                            NormalizedUserName = "REMINGTON.ADAMS@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDjBa4A0ordzld5PbGZXf1TVjWkSLQ3fy4MPYBjiQojdgyTgWpIrPnSBjSgZvoxqcQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "009f5673-4363-44c7-95b1-e4ff01efdb14",
                            TwoFactorEnabled = false,
                            UserName = "Remington.Adams@yahoo.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb616379-0a49-4535-ada3-a9bfd3ea7c33",
                            Email = "Abigayle_Monahan@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Jedediah Denesik",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABIGAYLE_MONAHAN@YAHOO.COM",
                            NormalizedUserName = "ABIGAYLE_MONAHAN@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENLBSNMhRyU2V/H192MHG27slI1umHhmNzh+kgr4RcnmqyBrq8GBS4hDz6wkJqvBwA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "93204320-fbbe-4a6b-944a-37ceea835234",
                            TwoFactorEnabled = false,
                            UserName = "Abigayle_Monahan@yahoo.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8ec682-f4b8-4834-b896-5cce872405e8",
                            Email = "Edd_Treutel98@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Lillie Kulas",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDD_TREUTEL98@HOTMAIL.COM",
                            NormalizedUserName = "EDD_TREUTEL98@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEliOXvpQlHojghLDP20NmUTM29nzURqRB/SmloEbjqXBVY3xd+VqlYWg3Bt4dKXqQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "2986ee97-e5d1-4f84-9bd3-44591c23308c",
                            TwoFactorEnabled = false,
                            UserName = "Edd_Treutel98@hotmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithOne("HealthInsurance")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.HealthInsurance", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurance")
                        .IsRequired();

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
