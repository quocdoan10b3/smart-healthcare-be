// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240625074709_edit_property_healthRecord")]
    partial class edit_property_healthRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageMedicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineImport");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "398 Romaguera Rapid, Port Reid, Trinidad and Tobago",
                            Class = "9/1",
                            Date = new DateTime(2010, 7, 8, 13, 53, 44, 215, DateTimeKind.Unspecified).AddTicks(3904),
                            Gender = true,
                            StudentCode = "HS2021763",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "83854 Maddison Knoll, Walshport, Jersey",
                            Class = "9/1",
                            Date = new DateTime(2010, 11, 25, 5, 26, 55, 54, DateTimeKind.Unspecified).AddTicks(9222),
                            Gender = true,
                            StudentCode = "HS2022742",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "534 Fermin Highway, Gaylordburgh, Yemen",
                            Class = "9/1",
                            Date = new DateTime(2015, 9, 26, 13, 37, 54, 762, DateTimeKind.Unspecified).AddTicks(5426),
                            Gender = true,
                            StudentCode = "HS2022694",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "5522 Prohaska Hills, North Kodyburgh, Luxembourg",
                            Class = "9/1",
                            Date = new DateTime(2017, 3, 3, 21, 36, 10, 194, DateTimeKind.Unspecified).AddTicks(8428),
                            Gender = true,
                            StudentCode = "HS2023728",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "45714 Clementina Drives, Johntown, Tuvalu",
                            Class = "9/1",
                            Date = new DateTime(2012, 4, 29, 2, 22, 39, 651, DateTimeKind.Unspecified).AddTicks(723),
                            Gender = true,
                            StudentCode = "HS2020661",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "6089 Jaskolski Stravenue, East Modestobury, Cote d'Ivoire",
                            Class = "9/1",
                            Date = new DateTime(2008, 8, 29, 16, 40, 52, 73, DateTimeKind.Unspecified).AddTicks(4585),
                            Gender = true,
                            StudentCode = "HS2023925",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "565 Hessel Road, Mylenetown, Argentina",
                            Class = "9/1",
                            Date = new DateTime(2016, 1, 6, 18, 59, 49, 99, DateTimeKind.Unspecified).AddTicks(6674),
                            Gender = true,
                            StudentCode = "HS2021190",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "191 Elza Locks, East Dillon, Thailand",
                            Class = "9/1",
                            Date = new DateTime(2016, 8, 11, 9, 17, 30, 851, DateTimeKind.Unspecified).AddTicks(6452),
                            Gender = false,
                            StudentCode = "HS2021780",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "632 Dorcas Cliff, Kuhlmanville, Norfolk Island",
                            Class = "9/1",
                            Date = new DateTime(2016, 1, 26, 18, 27, 57, 829, DateTimeKind.Unspecified).AddTicks(7412),
                            Gender = true,
                            StudentCode = "HS2021786",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "311 Emerson Vista, Port Nedberg, Yemen",
                            Class = "9/1",
                            Date = new DateTime(2010, 10, 17, 22, 56, 34, 829, DateTimeKind.Unspecified).AddTicks(3808),
                            Gender = true,
                            StudentCode = "HS2020113",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09f5ae6f-0d85-4182-b5ef-a198ac6012ea",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENViD7SuvjOKDdb1Yt92A5437yAq9KH4aZd8wfhr5qSlsnNSnHdxqj4LWunEyLXk2g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "89f40d34-99e2-4eef-a5b2-f2825b4e9552",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33fb2842-3d01-4927-b334-d22f51e533dd",
                            Email = "Jamir23@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Randy Zieme",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMIR23@GMAIL.COM",
                            NormalizedUserName = "HS2021763",
                            PasswordHash = "AQAAAAIAAYagAAAAEJsz7RBxjIowGtJ9NQ3sS+FTqYgvd+lGwshy74dZ4h1OPu1/pIO5JqDd0hXE1EUblg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5a4e2445-a777-4125-9630-ef0b07317fd9",
                            TwoFactorEnabled = false,
                            UserName = "HS2021763"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7d15ae9-4f87-4912-85f8-7ead10b0f3fd",
                            Email = "Violet.Christiansen4@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Andreane Watsica",
                            LockoutEnabled = false,
                            NormalizedEmail = "VIOLET.CHRISTIANSEN4@GMAIL.COM",
                            NormalizedUserName = "HS2022742",
                            PasswordHash = "AQAAAAIAAYagAAAAELNnwd9O8QcaS0ki/Jt/IUhjEWesu0dAt8XDPQj+lnw16U3r27mv7rQADo6A+9uenw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "8069b0ca-8845-47e8-b16c-946f88a931fa",
                            TwoFactorEnabled = false,
                            UserName = "HS2022742"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2388c0b-672f-48c3-bf34-f4b103cd1d91",
                            Email = "Tre_Simonis15@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Alec Kutch",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRE_SIMONIS15@HOTMAIL.COM",
                            NormalizedUserName = "HS2022694",
                            PasswordHash = "AQAAAAIAAYagAAAAEEm2bHaGpp0r1vOAnPtg3sDPsdLknu8aV28c/p2kmMSakQLHgdWQy94mMpg5/aIN5g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "044cbf51-66b5-4a38-9187-e4b01508e6b6",
                            TwoFactorEnabled = false,
                            UserName = "HS2022694"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c8f6316-5595-4e7d-9993-f128adc7472b",
                            Email = "Noemi.Moore@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Arnold Little",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOEMI.MOORE@GMAIL.COM",
                            NormalizedUserName = "HS2023728",
                            PasswordHash = "AQAAAAIAAYagAAAAELvA67bqFVfbG62/und2KGmlu5Y8ys0gwP1afYxm1iy5UxOit8gpAgnwrxt+Xkrt4g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "490e28fe-4712-4229-91a7-0168d923ea57",
                            TwoFactorEnabled = false,
                            UserName = "HS2023728"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c97e44fc-d926-4cee-b3ad-128e00eeb673",
                            Email = "Benton_Jacobi84@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Chris Rodriguez",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENTON_JACOBI84@HOTMAIL.COM",
                            NormalizedUserName = "HS2020661",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWZsoWU33cGz6MuZWSPE5bFIHy1I5ZMO29NwdrmS9gSM6SK20bHUNtY9+oRlKImNg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0a38dc26-6752-49a9-9ca9-30a66ce92fd3",
                            TwoFactorEnabled = false,
                            UserName = "HS2020661"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4125b60-e98d-45c5-8272-d6dbb29a3c6a",
                            Email = "Brisa.Murray19@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Bernie Torp",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRISA.MURRAY19@HOTMAIL.COM",
                            NormalizedUserName = "HS2023925",
                            PasswordHash = "AQAAAAIAAYagAAAAEK3R9piuVAu/8rfOkJ3t8iCskq367EPz/+NOo3AMGtG61tNwI+HYhGQWff+5wi612g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "893de065-383b-41dd-a22b-3f80afe399e7",
                            TwoFactorEnabled = false,
                            UserName = "HS2023925"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20a354fc-e41c-4b73-99bd-3e8562b3422a",
                            Email = "Albin8@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Aditya Schuppe",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALBIN8@YAHOO.COM",
                            NormalizedUserName = "HS2021190",
                            PasswordHash = "AQAAAAIAAYagAAAAENU/MgQ/qQBR4bKnzYgbrJ6ixUh+8Nj96N4V5ZdkdEUZDVAIXZHTjfcEiD4vVOOXew==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0832f540-3a12-4177-8c8e-8151439cd200",
                            TwoFactorEnabled = false,
                            UserName = "HS2021190"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca844818-ede8-42b0-87c3-16856e3fa99c",
                            Email = "Lia.Ruecker88@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Edythe Sporer",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIA.RUECKER88@HOTMAIL.COM",
                            NormalizedUserName = "HS2021780",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0TuSikYZQq35HOCC1kJaRyTXkBo7HslCyn1jaLoJccc5YqsO8cqa0dRZ8HdL5Ogg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "627be29b-d0ed-4264-a88a-d747e09067c0",
                            TwoFactorEnabled = false,
                            UserName = "HS2021780"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79f1f987-173e-4e8e-b779-a097f1a85e71",
                            Email = "Keira.Legros@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Emiliano Abbott",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEIRA.LEGROS@HOTMAIL.COM",
                            NormalizedUserName = "HS2021786",
                            PasswordHash = "AQAAAAIAAYagAAAAEC89MUb6IzpoPtxIG9OBQgb8y185bbrZZGTswO3MID9y9DqTtYhyHGC5rh9spoJbgw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "04105e81-9af7-4c3c-bcd6-5fb09ab6d6f1",
                            TwoFactorEnabled = false,
                            UserName = "HS2021786"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f60073c-0474-4f2e-9216-610b59433252",
                            Email = "Delphia_Hodkiewicz29@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Mariela Renner",
                            LockoutEnabled = false,
                            NormalizedEmail = "DELPHIA_HODKIEWICZ29@YAHOO.COM",
                            NormalizedUserName = "HS2020113",
                            PasswordHash = "AQAAAAIAAYagAAAAELkIO0RkDJ2EggYnTxDJDSmHrBkHsQgZxG1SbcakZ6HJQvrssXFs4FFpIm79lfUpTQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0f704838-c428-4144-a259-28888d1d683f",
                            TwoFactorEnabled = false,
                            UserName = "HS2020113"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Staff", "Staff")
                        .WithMany("Histories")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("MedicineImports")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Notification", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineImports");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Staff", b =>
                {
                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
