// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240526092632_add_property_feedBack")]
    partial class add_property_feedBack
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "8881 Skyla Causeway, Lake Julien, Timor-Leste",
                            Class = "9A",
                            Date = new DateTime(2013, 11, 16, 16, 38, 31, 152, DateTimeKind.Unspecified).AddTicks(6218),
                            Gender = false,
                            StudentCode = "Jayda_Wunsch76@hotmail.com",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "620 Bayer Track, Geovannyside, Lao People's Democratic Republic",
                            Class = "9A",
                            Date = new DateTime(2009, 9, 20, 18, 23, 48, 256, DateTimeKind.Unspecified).AddTicks(672),
                            Gender = false,
                            StudentCode = "Rowan_Lindgren@hotmail.com",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "027 Morissette Lane, Strackestad, Montenegro",
                            Class = "9A",
                            Date = new DateTime(2014, 8, 13, 13, 59, 5, 800, DateTimeKind.Unspecified).AddTicks(1970),
                            Gender = false,
                            StudentCode = "Jaylin49@gmail.com",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "0019 King Pass, South Leolafort, Bouvet Island (Bouvetoya)",
                            Class = "9A",
                            Date = new DateTime(2010, 6, 29, 8, 4, 32, 44, DateTimeKind.Unspecified).AddTicks(8043),
                            Gender = true,
                            StudentCode = "Name.Dickens@gmail.com",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "650 Blanche Stravenue, Lake Reggieside, Saint Pierre and Miquelon",
                            Class = "9A",
                            Date = new DateTime(2014, 9, 7, 4, 48, 2, 20, DateTimeKind.Unspecified).AddTicks(286),
                            Gender = false,
                            StudentCode = "Dax4@yahoo.com",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "3976 Schoen Estates, West Lura, Netherlands Antilles",
                            Class = "9A",
                            Date = new DateTime(2012, 11, 13, 17, 51, 32, 941, DateTimeKind.Unspecified).AddTicks(3342),
                            Gender = false,
                            StudentCode = "Lance50@yahoo.com",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "04089 Freeman Well, Marcmouth, Saint Pierre and Miquelon",
                            Class = "9A",
                            Date = new DateTime(2010, 7, 30, 0, 8, 5, 291, DateTimeKind.Unspecified).AddTicks(6620),
                            Gender = true,
                            StudentCode = "Lorenz.Jerde@yahoo.com",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "832 Verda Freeway, Port Morton, Bahamas",
                            Class = "9A",
                            Date = new DateTime(2009, 10, 9, 6, 24, 27, 313, DateTimeKind.Unspecified).AddTicks(6050),
                            Gender = true,
                            StudentCode = "Ayana_Lowe0@gmail.com",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "6141 Strosin Mall, Hailieton, Romania",
                            Class = "9A",
                            Date = new DateTime(2009, 4, 1, 22, 45, 9, 392, DateTimeKind.Unspecified).AddTicks(8808),
                            Gender = true,
                            StudentCode = "Jaclyn_Jenkins@yahoo.com",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "006 Morris Loop, Jarodchester, Guinea-Bissau",
                            Class = "9A",
                            Date = new DateTime(2016, 2, 17, 16, 31, 59, 999, DateTimeKind.Unspecified).AddTicks(7361),
                            Gender = false,
                            StudentCode = "Rickey32@yahoo.com",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a2a4ed8-3650-4622-9cc8-b1355645248e",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ2oWxxDDjyQw5NP1GO2A3jM0lMyx9NUFnm76ZG1V2gbEYAa+m9VsXusQLF2qokzkA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "62e4e0cd-9bf7-49ba-8299-00135c2b95f7",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc4ae790-b0b8-4e36-86e5-e6a701238c2d",
                            Email = "Jayda_Wunsch76@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Dusty Gislason",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAYDA_WUNSCH76@HOTMAIL.COM",
                            NormalizedUserName = "JAYDA_WUNSCH76@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOxp1jhjGSvzM0dSeeCB90GKmnai4rdylEdsc4ea1JuKXqD47AFfy2SGOCM2td7N6g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "c4fa5384-7ef7-4c14-9eec-c585f80f8652",
                            TwoFactorEnabled = false,
                            UserName = "Jayda_Wunsch76@hotmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9169f83a-dd98-4a10-b86d-43f3bc08331b",
                            Email = "Rowan_Lindgren@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Robbie Greenfelder",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROWAN_LINDGREN@HOTMAIL.COM",
                            NormalizedUserName = "ROWAN_LINDGREN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELTeiZqn0O4miz5CurJPKYsVCzFumkGRFR0ukEt682QMtVY3Qr5L3V+xcOXk/4wwCA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "51d22836-74fc-4328-b51a-b8ae48aac05a",
                            TwoFactorEnabled = false,
                            UserName = "Rowan_Lindgren@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f295219-eb51-4066-927d-5d2183ba1790",
                            Email = "Jaylin49@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nasir Mills",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAYLIN49@GMAIL.COM",
                            NormalizedUserName = "JAYLIN49@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPe4Gh7KjdQ7hEfQ36SPYckjfEpb+gf8OYC6UKvTMEurvqn5gOg7x9ctH+iVuggM+g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0ce0bd1f-a774-40ee-bd67-1e29a9041755",
                            TwoFactorEnabled = false,
                            UserName = "Jaylin49@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b74807d2-8102-4fca-9bc8-53adf483ef5a",
                            Email = "Name.Dickens@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Hester Ritchie",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAME.DICKENS@GMAIL.COM",
                            NormalizedUserName = "NAME.DICKENS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMWECMLuPQTFe3gYCQiCzulcYG7bagggtJqaLUz3cylrz5+XOZJt3EdKqKDyOlek6A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "1d0d1f95-7902-4d08-8c30-1532e0c133ac",
                            TwoFactorEnabled = false,
                            UserName = "Name.Dickens@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5a60c6c-0b24-4cee-92cf-aad603d597f0",
                            Email = "Dax4@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Dale Runte",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAX4@YAHOO.COM",
                            NormalizedUserName = "DAX4@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK8yclNQuiU+PN8dSoG+v05lH8UOGGdAKk8bmJzFxphgoqLae7Ku3Ni3hvEaRCVE2A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "4cad5a1f-03f1-4a04-a9b7-a93783f5b481",
                            TwoFactorEnabled = false,
                            UserName = "Dax4@yahoo.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1aeceb4-aedf-46a0-919f-8350688623df",
                            Email = "Lance50@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Nathan Oberbrunner",
                            LockoutEnabled = false,
                            NormalizedEmail = "LANCE50@YAHOO.COM",
                            NormalizedUserName = "LANCE50@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIO/e0iXDAeW2fr1oRmrqLINfON/colNvEduaOUSUddUbw6JL/bBEv0qstzpHx0vg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "caf9bba8-f659-4509-b1bf-08ab2e23082d",
                            TwoFactorEnabled = false,
                            UserName = "Lance50@yahoo.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78fdc457-d002-48ed-834b-7d5d5ff03497",
                            Email = "Lorenz.Jerde@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Demetris Franecki",
                            LockoutEnabled = false,
                            NormalizedEmail = "LORENZ.JERDE@YAHOO.COM",
                            NormalizedUserName = "LORENZ.JERDE@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAdCyiCiPF7gWO33IF3CJziKrr8FoseIL6517QuZ9ufeNeXwWPXqlc6OURsWq/Y6Qw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "4f5830ee-80f1-423d-8c3b-47168616c6d3",
                            TwoFactorEnabled = false,
                            UserName = "Lorenz.Jerde@yahoo.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ab8b63d-bb9f-4ca6-b972-5c7216af82b1",
                            Email = "Ayana_Lowe0@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Oren Robel",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYANA_LOWE0@GMAIL.COM",
                            NormalizedUserName = "AYANA_LOWE0@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBizPbDJ6ECRyjvxtSxDubgcKRTD72Jtex4TyOcFuDe9Yjp9NKF4qr0WxQFHAwSNCg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "b7beabb6-5e48-43d8-8e97-1613f6d0b4dd",
                            TwoFactorEnabled = false,
                            UserName = "Ayana_Lowe0@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b66178c-8e2f-4276-8088-666bb02fdd87",
                            Email = "Jaclyn_Jenkins@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Iliana Hickle",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACLYN_JENKINS@YAHOO.COM",
                            NormalizedUserName = "JACLYN_JENKINS@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH7BR68CCygr8pytaBF0hWea0xX4O08aegzPFVlhsVC9I3qAVxxheYj3askMPCFZJA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "ee131d59-a9e2-427f-922d-78d562127364",
                            TwoFactorEnabled = false,
                            UserName = "Jaclyn_Jenkins@yahoo.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7accdc9-aee7-4b18-891c-3397b1427bf8",
                            Email = "Rickey32@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Carter Labadie",
                            LockoutEnabled = false,
                            NormalizedEmail = "RICKEY32@YAHOO.COM",
                            NormalizedUserName = "RICKEY32@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFxXnWHn11OgZx3QRCqvXG1Tt6YRGdtjniniNiKu2yn8Eo0dpI/NzL4iRsfxCdkwtg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "85c4c7ec-4d16-4005-a9f8-8aa1b9932b3d",
                            TwoFactorEnabled = false,
                            UserName = "Rickey32@yahoo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithOne("HealthInsurance")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.HealthInsurance", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurance")
                        .IsRequired();

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
