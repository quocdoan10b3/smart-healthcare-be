// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealthCare.Infrastructure.Data;

#nullable disable

namespace SmartHealthCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240603174252_medicine_import")]
    partial class medicine_import
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Response")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DentalHealth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hearing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Scholastic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageMedicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineImport");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "34828 Moore Field, West Mozelle, Panama",
                            Class = "9A",
                            Date = new DateTime(2015, 8, 3, 8, 35, 40, 232, DateTimeKind.Unspecified).AddTicks(1562),
                            Gender = false,
                            StudentCode = "HS2021012",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "2230 Heathcote Drive, South Lamar, Tunisia",
                            Class = "9A",
                            Date = new DateTime(2011, 11, 16, 14, 31, 42, 384, DateTimeKind.Unspecified).AddTicks(7196),
                            Gender = true,
                            StudentCode = "HS2021816",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "463 Jaycee Roads, Port Gregoria, Venezuela",
                            Class = "9A",
                            Date = new DateTime(2010, 6, 11, 19, 7, 12, 776, DateTimeKind.Unspecified).AddTicks(1604),
                            Gender = true,
                            StudentCode = "HS2022722",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "24638 Welch Extension, Lake Jeromemouth, Cyprus",
                            Class = "9A",
                            Date = new DateTime(2017, 11, 19, 22, 41, 9, 4, DateTimeKind.Unspecified).AddTicks(741),
                            Gender = true,
                            StudentCode = "HS2023157",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Address = "999 Electa Keys, Marcelinomouth, Turkey",
                            Class = "9A",
                            Date = new DateTime(2009, 12, 31, 12, 40, 36, 78, DateTimeKind.Unspecified).AddTicks(661),
                            Gender = true,
                            StudentCode = "HS2021901",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Address = "371 Lorna Square, Lake Ivory, Hong Kong",
                            Class = "9A",
                            Date = new DateTime(2011, 1, 1, 20, 35, 23, 116, DateTimeKind.Unspecified).AddTicks(5521),
                            Gender = false,
                            StudentCode = "HS2021213",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Address = "88941 Bessie Village, New Marcia, Fiji",
                            Class = "9A",
                            Date = new DateTime(2014, 7, 3, 17, 22, 17, 527, DateTimeKind.Unspecified).AddTicks(6171),
                            Gender = false,
                            StudentCode = "HS2021737",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Address = "783 Langosh Rapid, Kasandrahaven, Austria",
                            Class = "9A",
                            Date = new DateTime(2012, 7, 2, 5, 3, 19, 89, DateTimeKind.Unspecified).AddTicks(3542),
                            Gender = true,
                            StudentCode = "HS2021930",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Address = "33077 Roselyn Isle, Neldaville, Finland",
                            Class = "9A",
                            Date = new DateTime(2008, 8, 29, 4, 11, 59, 35, DateTimeKind.Unspecified).AddTicks(7122),
                            Gender = false,
                            StudentCode = "HS2023605",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Address = "75379 Torp Shores, Champlinchester, Western Sahara",
                            Class = "9A",
                            Date = new DateTime(2018, 3, 2, 12, 56, 45, 563, DateTimeKind.Unspecified).AddTicks(2250),
                            Gender = true,
                            StudentCode = "HS2021907",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af1617cb-0735-44d6-bd4e-e103fe84cb8a",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECGAvtq/X4k1BAEY8M3NwyTIQXO0lxI42gzgxqQAtcCBAASFnNbPOR7wh9Oy7tbfMA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "da103fa3-e574-4e36-af1a-3bca52a8f98d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f26bf51e-f341-4c94-98a9-b6d39636f7b4",
                            Email = "Lizzie91@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Annamarie Luettgen",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIZZIE91@GMAIL.COM",
                            NormalizedUserName = "HS2021012",
                            PasswordHash = "AQAAAAIAAYagAAAAEMHlJgJqL57F2cq87R7RmV5T78uRh9pp8u+YZ4GW7b0yAGIQv3t6aV3tEEbiYsQ45A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "464e701f-4641-4a92-a2e1-270f7e2a524a",
                            TwoFactorEnabled = false,
                            UserName = "HS2021012"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0023d56e-f11a-4d36-9818-2d03e855bdbe",
                            Email = "Ubaldo15@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Ramon White",
                            LockoutEnabled = false,
                            NormalizedEmail = "UBALDO15@HOTMAIL.COM",
                            NormalizedUserName = "HS2021816",
                            PasswordHash = "AQAAAAIAAYagAAAAEM4dsgOmsApe7LyBE2N9oTJD6TqQDmjIinq8nq7Zh2GeznbTqeghJRBhxD5VdBf/zg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5659a0ee-6a1f-403a-998d-e9baeba7c479",
                            TwoFactorEnabled = false,
                            UserName = "HS2021816"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05be68bb-4b68-4fe6-8caf-3d8aa04b463c",
                            Email = "Elena29@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Keegan Schneider",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENA29@YAHOO.COM",
                            NormalizedUserName = "HS2022722",
                            PasswordHash = "AQAAAAIAAYagAAAAEMHUb6BNFweHprlUPQ42/td2xIjLYmJqMehS38D4WsWU3TcELOnZvBrPb33tbf9OZA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "1b811a70-9aee-4f61-81f7-3b3ea1dad895",
                            TwoFactorEnabled = false,
                            UserName = "HS2022722"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdd94064-c5af-4758-9d7b-b1050ca44508",
                            Email = "Precious.Mann97@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Vicente Rodriguez",
                            LockoutEnabled = false,
                            NormalizedEmail = "PRECIOUS.MANN97@HOTMAIL.COM",
                            NormalizedUserName = "HS2023157",
                            PasswordHash = "AQAAAAIAAYagAAAAEHbZu74WCNxHn8pR80aNAUqxqTKqqzaIuXp+ElwgQj1/SAhNYsVqQhLfFP8bYceuCA==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "384c70f0-e163-4aa6-989c-a3143a7b2791",
                            TwoFactorEnabled = false,
                            UserName = "HS2023157"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24deafaf-05de-4b58-b22a-958fe476b673",
                            Email = "Krystel.Friesen72@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Gloria Powlowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRYSTEL.FRIESEN72@YAHOO.COM",
                            NormalizedUserName = "HS2021901",
                            PasswordHash = "AQAAAAIAAYagAAAAENnkTwsnLGOOu0S/VdbsGkuqAg0MTTNRjBGdtdE+XkqEJXbULLgUyY2cno/GCsJ1Lw==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "60837039-2b29-4256-947d-2185da614820",
                            TwoFactorEnabled = false,
                            UserName = "HS2021901"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21b8cae1-ac5c-42cc-8f1d-63340e98d36c",
                            Email = "Angelita_Schneider@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Shanna Crona",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELITA_SCHNEIDER@HOTMAIL.COM",
                            NormalizedUserName = "HS2021213",
                            PasswordHash = "AQAAAAIAAYagAAAAEICHawrUMXJB1vsYRH02Ziz2bJKVfMwyK8qLToVYxkgCazy2MS9aB4nrUojxFAJS4g==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "5bcd559a-0d26-4c34-9efe-00244a182249",
                            TwoFactorEnabled = false,
                            UserName = "HS2021213"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e8a5311-d693-4792-8ead-ab2c24f0897f",
                            Email = "Warren16@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Hester Stark",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARREN16@YAHOO.COM",
                            NormalizedUserName = "HS2021737",
                            PasswordHash = "AQAAAAIAAYagAAAAEBClsHYAzcWVYGURZA7aM3jtcFpMZslUpsFvxcZlOdouDh6Nfw19IOsRA7tBB1CXqQ==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "1b95c23c-3f91-41bf-8789-78537f6892b8",
                            TwoFactorEnabled = false,
                            UserName = "HS2021737"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24db54af-4a97-4e3b-8340-cbef7acda42d",
                            Email = "Krista.Schneider@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Delores Connelly",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTA.SCHNEIDER@YAHOO.COM",
                            NormalizedUserName = "HS2021930",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdC6OThe5QOWDxyqjnwIBET+BklW4g9umZjrvwlrnnZugBF7OJ8An0SvCioRjRs0A==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "1fde3b21-d593-4d90-8f21-ac3e88d9ac72",
                            TwoFactorEnabled = false,
                            UserName = "HS2021930"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fb1120a-3a46-49c0-a268-b5421a2d3ab5",
                            Email = "Norris.Hintz95@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Adella Daniel",
                            LockoutEnabled = false,
                            NormalizedEmail = "NORRIS.HINTZ95@GMAIL.COM",
                            NormalizedUserName = "HS2023605",
                            PasswordHash = "AQAAAAIAAYagAAAAEMHXU5NP6YLq00fV8fdStthKXAzOgzl1gyoHYM4orbNqevoPpHOkhQs7elpgtgRnXg==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "0a24c91f-8c18-4ef2-aaf1-51982a1f4bf8",
                            TwoFactorEnabled = false,
                            UserName = "HS2023605"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "584c31c6-cae9-44b4-9448-ce076f24d41b",
                            Email = "Maribel34@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Orlo Fahey",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIBEL34@GMAIL.COM",
                            NormalizedUserName = "HS2021907",
                            PasswordHash = "AQAAAAIAAYagAAAAEFLHL9OS0MfBSynmd0Xf9VARxePrNvrvbciLeJaH5iS/Xa5xx99zzEu0b0Zdm2fo8w==",
                            PhoneNumberConfirmed = false,
                            Role = "",
                            SecurityStamp = "2287eb11-c569-4ada-af91-9139686ac0b3",
                            TwoFactorEnabled = false,
                            UserName = "HS2021907"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthInsurance", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Student", "Student")
                        .WithMany("Histories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.MedicineImport", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("MedicineImports")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.History", "History")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealthCare.Domain.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.HasOne("SmartHealthCare.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartHealthCare.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.History", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineImports");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.Student", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("HealthInsurances");

                    b.Navigation("HealthRecords");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SmartHealthCare.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
